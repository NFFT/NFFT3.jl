var documenterSearchIndex = {"docs":
[{"location":"Flags.html#Flags","page":"Flags","title":"Flags","text":"","category":"section"},{"location":"Flags.html","page":"Flags","title":"Flags","text":"PRE_PHI_HUT\nFG_PSI\nPRE_LIN_PSI\nPRE_FG_PSI\nPRE_PSI\nPRE_FULL_PSI\nMALLOC_X\nMALLOC_F_HAT\nMALLOC_F\nFFT_OUT_OF_PLACE\nFFTW_INIT\nNFFT_SORT_NODES\nNFFT_OMP_BLOCKWISE_ADJOINT\nNFCT_SORT_NODES\nNFCT_OMP_BLOCKWISE_ADJOINT\nNFST_SORT_NODES\nNFST_OMP_BLOCKWISE_ADJOINT\nFFTW_MEASURE\nFFTW_DESTROY_INPUT\nFFTW_UNALIGNED\nFFTW_CONSERVE_MEMORY\nFFTW_EXHAUSTIVE\nFFTW_PRESERVE_INPUT\nFFTW_PATIENT\nFFTW_ESTIMATE\nFFTW_WISDOM_ONLY","category":"page"},{"location":"Flags.html#NFFT3.PRE_PHI_HUT","page":"Flags","title":"NFFT3.PRE_PHI_HUT","text":"PRE_PHI_HUT\n\nprecompute and store values hatphi(k) of the Fourier transform of the window function hatphi.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FG_PSI","page":"Flags","title":"NFFT3.FG_PSI","text":"FG_PSI\n\nfast Gaussian gridding.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.PRE_LIN_PSI","page":"Flags","title":"NFFT3.PRE_LIN_PSI","text":"PRE_LIN_PSI\n\nlinear interpolation of the window function from a lookup table.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.PRE_FG_PSI","page":"Flags","title":"NFFT3.PRE_FG_PSI","text":"PRE_FG_PSI\n\nfast Gaussian gridding.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.PRE_PSI","page":"Flags","title":"NFFT3.PRE_PSI","text":"PRE_PSI\n\nprecomputation based on tensor product structure of the window function.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.PRE_FULL_PSI","page":"Flags","title":"NFFT3.PRE_FULL_PSI","text":"PRE_FULL_PSI\n\ncalculate and store all values tildepsi(x_j - frac1n odot l).\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.MALLOC_X","page":"Flags","title":"NFFT3.MALLOC_X","text":"MALLOC_X\n\nallocate memory for node x_j.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.MALLOC_F_HAT","page":"Flags","title":"NFFT3.MALLOC_F_HAT","text":"MALLOC_F_HAT\n\nallocate memory for coefficienthatf_k.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.MALLOC_F","page":"Flags","title":"NFFT3.MALLOC_F","text":"MALLOC_F\n\nallocate memory for approximate function value f_j.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFT_OUT_OF_PLACE","page":"Flags","title":"NFFT3.FFT_OUT_OF_PLACE","text":"FFT_OUT_OF_PLACE\n\nFFTW uses disjoint input/output vector.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_INIT","page":"Flags","title":"NFFT3.FFTW_INIT","text":"FFTW_INIT\n\ninitialize FFTW plan.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFFT_SORT_NODES","page":"Flags","title":"NFFT3.NFFT_SORT_NODES","text":"NFFT_SORT_NODES\n\ninternal sorting of the nodes x_j that may increase performance.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFFT_OMP_BLOCKWISE_ADJOINT","page":"Flags","title":"NFFT3.NFFT_OMP_BLOCKWISE_ADJOINT","text":"NFFT_OMP_BLOCKWISE_ADJOINT\n\nblockwise calculation for adjoint NFFT in the case of OpenMP.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFCT_SORT_NODES","page":"Flags","title":"NFFT3.NFCT_SORT_NODES","text":"NFCT_SORT_NODES\n\ninternal sorting of the nodes x_j that may increase performance.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFCT_OMP_BLOCKWISE_ADJOINT","page":"Flags","title":"NFFT3.NFCT_OMP_BLOCKWISE_ADJOINT","text":"NFCT_OMP_BLOCKWISE_ADJOINT\n\nblockwise calculation for adjoint NFFT in the case of OpenMP.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFST_SORT_NODES","page":"Flags","title":"NFFT3.NFST_SORT_NODES","text":"NFST_SORT_NODES\n\ninternal sorting of the nodes x_j that may increase performance.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFST_OMP_BLOCKWISE_ADJOINT","page":"Flags","title":"NFFT3.NFST_OMP_BLOCKWISE_ADJOINT","text":"NFST_OMP_BLOCKWISE_ADJOINT\n\nblockwise calculation for adjoint NFFT in the case of OpenMP.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_MEASURE","page":"Flags","title":"NFFT3.FFTW_MEASURE","text":"FFTW_MEASURE\n\nfind optimal plan by executing several FFTs and compare times.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_DESTROY_INPUT","page":"Flags","title":"NFFT3.FFTW_DESTROY_INPUT","text":"FFTW_DESTROY_INPUT\n\nan out-of-place transform is allowed to overwrite the input array with arbitrary data.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_UNALIGNED","page":"Flags","title":"NFFT3.FFTW_UNALIGNED","text":"FFTW_UNALIGNED\n\nthe algorithm may not impose any unusual align\u0002ment requirements on the input/output arrays (not necessary in most context).\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_CONSERVE_MEMORY","page":"Flags","title":"NFFT3.FFTW_CONSERVE_MEMORY","text":"FFTW_CONSERVE_MEMORY\n\nconserving memory.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_EXHAUSTIVE","page":"Flags","title":"NFFT3.FFTW_EXHAUSTIVE","text":"FFTW_EXHAUSTIVE\n\nbehaves like FFTW_PATIENT with an even wider range of tests.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_PRESERVE_INPUT","page":"Flags","title":"NFFT3.FFTW_PRESERVE_INPUT","text":"FFTW_PRESERVE_INPUT\n\ninput vector is preserved and unchanged.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_PATIENT","page":"Flags","title":"NFFT3.FFTW_PATIENT","text":"FFTW_PATIENT\n\nbehaves like FFTW_MEASURE with a wider range of tests.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_ESTIMATE","page":"Flags","title":"NFFT3.FFTW_ESTIMATE","text":"FFTW_ESTIMATE\n\nuse simple heuristic instead of measurements to pick a plan.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_WISDOM_ONLY","page":"Flags","title":"NFFT3.FFTW_WISDOM_ONLY","text":"FFTW_WISDOM_ONLY\n\na plan is only created if wisdom from tests is available.\n\n\n\n\n\n","category":"constant"},{"location":"NFCT.html#NFCT_site","page":"NFCT","title":"Nonequispaced Fast Cosine Transform","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    CurrentModule = NFFT3","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    NFCT{D}","category":"page"},{"location":"NFCT.html#NFFT3.NFCT","page":"NFCT","title":"NFFT3.NFCT","text":"NFCT{D}\n\nA NFCT (Nonequispaced fast cosine transform) plan, where D is the dimension. \n\nThe NFCT realizes a direct and fast computation of the discrete nonequispaced cosine transform. The aim is to compute\n\nf^c (x) colon = sum_k in I_N hatf^c_k cos (k dot x) quad x in mathbbR^D\n\nat given (nonequidistant) knots x_k in 0 pi ^D  k = 0 cdots M-1, coefficients hatf^c_k in mathbbR, k in I_N colon =  k in mathbbZ^D colon 0 leq k_i leq N_i  forall i = 1 cdots D for some multibandlimit vector N in mathbbN^D. The transposed (adjoined) problem reads as\n\nhath_k colon = sum_j in I_M f_j cos (k dot x_j) quad k in I^D_N\n\nfor given knots x_k in 0 pi ^D  k = 0 cdots M-1, and coefficients f_j in mathbbC j in I_M^l.\n\nFields\n\nN - the multibandlimit of the trigonometric polynomial f.\nM - the number of nodes.\nn - the oversampling per dimension.\nm - the window size. Larger m means more accuracy but also more computational costs. \nf1 - the NFCT flags.\nf2 - the FFTW flags.\ninit_done - indicates if the plan is initialized.\nfinalized - indicates if the plan is finalized.\nx - the nodes.\nf - the function values.\nfhat - the Fourier coefficients.\nplan\n\nConstructor\n\nNFCT{D}(N::NTuple{D,Int32},M::Int32,n::NTuple{D,Int32},m::Int32,f1::UInt32,f2::UInt32) where {D}\n\nAdditional Constructor\n\nNFCT(N::NTuple{D,Int32},M::Int32,n::NTuple{D,Int32},m::Int32,f1::UInt32,f2::UInt32) where {D}\nNFCT(N::NTuple{D,Int32},M::Int32) where {D}\n\nSee also\n\nNFFT\n\n\n\n\n\n","category":"type"},{"location":"NFCT.html#NFCT","page":"NFCT","title":"NFCT","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"The NFCT (Nonequispaced fast cosine transform) ([Plonka, Potts, Steidl, Tasche, 2018], Sec. 7.4) realizes a multivariate fast cosine transform for nonequispaced knots. The aim is to compute ","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    f^c (x) coloneqq sum_ k in I_ N hatf_ k^c cos( k cdot x) quad x in mathbbR^d","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"at given (nonequidistant) knots x_k in  0pi ^d  k = 0 ldots M-1, coefficients hatf_ k^c in mathbbR  k in I_ N coloneqq  kin mathbbN^d 0 leq k_i leq N_i  forall  i = 1 ldots d  for some multibandlimit vector N in mathbbN^d.  \nFor simplicity, we only consider the univariate case (d=1). The multivariate case, which is also implemented in the module, can be derived analogously from the NFFT algorithm (see e.g. [Schmischke, 2018] or [Plonka, Potts, Steidl, Tasche, 2018], Chapter 7). Hence, we want to approximate ","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    f^c colon  0 pi  to mathbbC quad f^c(x_j) = sum_k=0^N-1 hatf^c_k cos(k x_j) = sum_k=-N^N-1 hatf_k mathrme^ mathrmi k x_j","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"with x_j in 0pi  j=0 ldots M-1 the nodes and hatf_k^c in mathbbR  k = 0 ldots N-1 the coefficients. Observe that the second equality sign is only justified when hatf_0 = hatf_0^c  hatf__N=0  hatf_k = hatf_-k= frac12hatf_k^c. Similarly to the NFFT, we choose g_ell in mathbbR in the following term such that s_1 with a given window function varphiin L_2(mathbbR)cap L_1(mathbbR) approximates f","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    s_1(x) coloneqq sum_ell=0^sigma N g_ell  tildevarphi(x-fracpiellsigma N) quad xin mathbbR","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"sigma in mathbbN is an oversampling factor fulfilling sigma N in mathbbN. Replacing varphi by its Fourier series varphi (x) = sum_kin mathbbN hatg_k mathrme^mathrmi k x, comparing the definition of s_1(cdot) and f^c(cdot) and taking the symmetry into account, we obtain ","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    g_ell = frac1sigma N sum_k=0^sigma N (varepsilon_sigma N(k))^2 hatg_k cos ( frac2 pi k ellsigma N ) quad ell = 0 ldots sigma N","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"Here, varepsilon_sigma N(j)coloneqq 1  j=1ldotssigma N-1, and varepsilon_sigma N(0)coloneqq varepsilon_sigma N(sigma N)coloneqq fracsqrt22. Now, we can compute g_ell by an DCT-I of length sigma N +1 and obtain f(x) approx s_1(x).  \nNext, we want to replace varphi by its truncation","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    psi(x) = varphi(x) chi_Q (x) = begincases varphi(x)  xin Qcoloneqq -frac2pi msigma Nfrac2pi msigma N    0  else endcases","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"As in the definition of s_1(cdot), we replace psi by its periodization tildepsi and define","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"  \ts(x) coloneqq sum_ell=lfloor 2sigma N xrfloor -m^lceil 2sigma N xrceil +m g_ell  tildepsi(x-fracpi ellsigma N)quad xinmathbbR","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"We arrive at f(x)approx s_1(x) approx s(x). ","category":"page"},{"location":"NFCT.html#Pseudocode","page":"NFCT","title":"Pseudocode","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"Input: N M in mathbbN  sigma  1  m in mathbbN  x_j in 0 pi text for  j = 0 ldots M - 1  f^c_k in mathbbR text for  k = 0 ldots N - 1","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"Precomputation: Compute the nonzero Fourier coefficients c_k(tildevarphi) text for all  k = 0 ldots N - 1 Compute the values tildepsi (x_j -fracpi ellsigma N) text for  j = 0 ldots M - 1 text and  ell in I_sigma N  m (x_j)","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"Set hatg_k coloneqq begincases frachatf^c_k2 (varepsilon_sigma N(k))^2 c_k(tildevarphi)  k = 0 ldots N - 1  0  k = N ldots sigma N endcases \nCompute g_ell = frac1sigma N sum_k=0^sigma N (varepsilon_sigma N(k))^2 hatg_k cos ( fracpi k ellsigma N ) quad ell = 0 ldots sigma N using a fast algorithm of DCT-I(sigma N + 1), see Algorithm 6.28 or 6.35 in [Plonka, Potts, Steidl, Tasche, 2018]. \nCompute s(x_j) coloneqq sum_ell=lfloor 2sigma N x_j rfloor -m^lceil 2 sigma N x_j  rceil +m g_ell tildepsi(x_j -fracpi ellsigma N) quad j = 0 ldots M-1.","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"Output: s(x_j)  j = 0 ldots M-1, approximate values of f^c(x_j).","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"Computational cost: mathcalO(N logN + m  M) ","category":"page"},{"location":"NFCT.html#Transposed-problem","page":"NFCT","title":"Transposed problem","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"The transposed problem reads as","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"\th(k) coloneqq sum_ j in I_M^l f_j cos( k  x_j) quad  k in I_ N^d coloneqq  k in mathbbN^d colon 0 leq k_i leq N_i  ","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"for given knots x_k in  0pi ^d  k=0ldotsM-1, and coefficients f_j in mathbbC j in I_M^l. The algorithm for the fast evaluation of ","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"\th(k) coloneqq sum^M-1_ j = 0 h_j  cos(k  x_j) quad k = 0 ldots N-1","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"with nonequispaced nodes x_j in  0pi   j=0ldotsM-1 can easily be derived from the duality of the two problems.","category":"page"},{"location":"NFCT.html#Functions","page":"NFCT","title":"Functions","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"  \tnfct_finalize_plan\n    nfct_init\n    nfct_trafo\n    nfct_adjoint\n    nfct_trafo_direct\n    nfct_adjoint_direct","category":"page"},{"location":"NFCT.html#NFFT3.nfct_finalize_plan","page":"NFCT","title":"NFFT3.nfct_finalize_plan","text":"nfct_finalize_plan(P::NFCT{D})\n\ndestroys a NFCT plan structure.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, nfct_init\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#NFFT3.nfct_init","page":"NFCT","title":"NFFT3.nfct_init","text":"nfct_init(P)\n\nintialises a transform plan.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, nfct_finalize_plan\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#NFFT3.nfct_trafo","page":"NFCT","title":"NFFT3.nfct_trafo","text":"nfct_trafo(P)\n\ncomputes a NFCT.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, trafo_direct\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#NFFT3.nfct_adjoint","page":"NFCT","title":"NFFT3.nfct_adjoint","text":"nfct_adjoint(P)\n\ncomputes an adjoint NFCT.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, adjoint_direct\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#NFFT3.nfct_trafo_direct","page":"NFCT","title":"NFFT3.nfct_trafo_direct","text":"nfct_trafo_direct(P)\n\ncomputes a NFCT.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, nfct_trafo\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#NFFT3.nfct_adjoint_direct","page":"NFCT","title":"NFFT3.nfct_adjoint_direct","text":"nfct_adjoint_direct(P)\n\ncomputes an adjoint NFCT.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, adjoint\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#Literature","page":"NFCT","title":"Literature","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"<ul>\n<li id=\"PlonkaPottsSteidlTasche2018\">[<a>Plonka, Potts, Steidl, Tasche, 2018</a>]\n  G. Plonka, D. Potts, G. Steidl and M. Tasche. Numerical Fourier Analysis: Theory and Applications.</emph>\n  Springer Nature Switzerland AG, 2018.\n  doi: <a href=\"https://doi.org/10.1007/978-3-030-04306-3\">10.1007/978-3-030-04306-3</a>.\n</li>\n</ul>","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"<ul>\n<li id=\"Schmischke2018\">[<a>Schmischke, 2018</a>]\n  M. Schmischke. Nonequispaced Fast Fourier Transform (NFFT) Interface for Julia.</emph>\n  2018.\n  arXiv: <a href=\"https://arxiv.org/abs/1810.09891\">1512.02814</a>.\n</li>\n</ul>","category":"page"},{"location":"NFST.html#NFST_site","page":"NFST","title":"Nonequispaced Fast Sine Transform","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"    CurrentModule = NFFT3","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"    NFST{D}","category":"page"},{"location":"NFST.html#NFFT3.NFST","page":"NFST","title":"NFFT3.NFST","text":"NFST{D}\n\nA NFST (Nonequispaced fast sine transform) plan, where D is the dimension. \n\nThe NFST realizes a direct and fast computation of the discrete nonequispaced sine transform. The aim is to compute\n\nf^c (x) colon = sum_k in I_N hatf^c_k sin (k dot x) quad x in mathbbR^D\n\nat given (nonequidistant) knots x_k in 0 pi ^D  k = 0 cdots M-1, coefficients hatf^c_k in mathbbR, k in I_N colon =  k in mathbbZ^D colon 0 leq k_i leq N_i  forall i = 1 cdots D for some multibandlimit vector N in mathbbN^D. The transposed (adjoined) problem reads as\n\nhath_k colon = sum^M-1_j = 0 f_j e^-2 pi mathrmi mathbfk cdot mathbfx_j  k in I_N\n\nfor given knots x_k in 0 pi ^D  k = 0 cdots M-1, and coefficients fj ∈ C, j ∈ I l M.\n\nFields\n\nN - the multibandlimit of the trigonometric polynomial f.\nM - the number of nodes.\nn - the oversampling per dimension.\nm - the window size. Larger m means more accuracy but also more computational costs. \nf1 - the NFST flags.\nf2 - the FFTW flags.\ninit_done - indicates if the plan is initialized.\nfinalized - indicates if the plan is finalized.\nx - the nodes.\nf - the function values.\nfhat - the Fourier coefficients.\nplan\n\nConstructor\n\nNFST{D}(N::NTuple{D,Int32},M::Int32,n::NTuple{D,Int32},m::Int32,f1::UInt32,f2::UInt32) where {D}\n\nAdditional Constructor\n\nNFST(N::NTuple{D,Int32},M::Int32,n::NTuple{D,Int32},m::Int32,f1::UInt32,f2::UInt32) where {D}\nNFST(N::NTuple{D,Int32},M::Int32) where {D}\n\nSee also\n\nNFFT\n\n\n\n\n\n","category":"type"},{"location":"NFST.html#NFST","page":"NFST","title":"NFST","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"We modify the NFFT in order to derive a fast algorithm for the evaluation of the odd, 2 pi-periodic trigonometric polynomial","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"    f^s (x) coloneqq sum^N-1_k=1 hatf_k^s sin( k  x) quad x in mathbbR","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"at nonequispaced nodes x_j in (0pi). To this end, we rewrite f^s as a sum of exponentials and obtain","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"    mathrmi  f^s (x) = f(x) = sum^N-1_k=-N hatf_k mathrme^mathrmi  k  x = mathrmi sum^N-1_k=1 2 hatf_k sin( k  x) quad x in mathbbR","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"with hatf_0 = hatf_-N = 0 and hatf_k = -hatf_-k = frac12hatf^s_k for k = 1 ldots N - 1. Similarly as before, we approximate f(x) by a function s_1(x) and obtain for the coefficients g_ell for ell = 1 ldots sigma N - 1","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"    - mathrmi g_ell = frac- mathrmi2 sigma N sum^sigma N - 1_k=-sigma N hatg_k mathrme^pi  mathrmi  k  ell  (sigma N) = frac1sigma N sum^sigma N - 1_k=1 hatg_k sin( fracpi  k  ellsigma N)","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"and particularly g_0 = g_sigma N = 0. Moreover, we observe that g_2 sigma N r - ell = -g_ell for all r in mathbbZ. Finally we compute the sum","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"  \tmathrmi  s(x_j) coloneqq sum_ell = lfloor 2 sigma N x rfloor - m ^lceil 2 sigma N x rceil + m mathrmi  g_ell  tildepsi(x_j - fracpi ellsigma N)","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"and obtain the approximate values of f^s(x_j) = mathrmi  f(x_j) approx mathrmi  s(x_j)  j = 0 ldotM - 1.","category":"page"},{"location":"NFST.html#Pseudocode","page":"NFST","title":"Pseudocode","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"Input: N M in mathbbN  sigma  1  m in mathbbN  x_j in (0 pi) text for  j = 0 ldots M - 1  f^s_k in mathbbR text for  k = 0 ldots N - 1","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"Precomputation: Compute the nonzero Fourier coefficients c_k(tildevarphi) text for all  k = 0 ldots N - 1 Compute the values tildepsi (x_j -fracpi ellsigma N) text for  j = 0 ldots M - 1 text and  ell in I^mathrmT_sigma N  m (x_j)","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"Set hatg_k coloneqq begincases frachatf^s_k2 c_k(tildevarphi)  k = 1 ldots N - 1  0  k = 0 text and  k = N ldots sigma N endcases \nCompute g_ell = frac1sigma N sum_k=1^sigma N - 1 hatg_k sin ( fracpi k ellsigma N ) quad ell = 1 ldots sigma N - 1 using a fast algorithm of DST-I(sigma N - 1), see  Table 6.1 and Remark 6.40 in [Plonka, Potts, Steidl, Tasche, 2018] and set g_0 coloneqq 0. \nCompute s(x_j) coloneqq sum_ell=lfloor 2sigma N x_j rfloor -m^lceil 2 sigma N x_j  rceil +m g_ell tildepsi(x_j -fracpi ellsigma N) quad j = 0 ldots M-1.","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"Output: s(x_j)  j = 0 ldots M-1, approximate values of f^s(x_j).","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"Computational cost: mathcalO(N logN + m  M) ","category":"page"},{"location":"NFST.html#Transposed-problem","page":"NFST","title":"Transposed problem","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"The transposed problem reads as","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"\th(k) coloneqq sum_ j in I_M^l f_j sin( k  x_j) quad  k in I_ N^d coloneqq  k in mathbbN^d colon 0 leq k_i leq N_i  ","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"for given knots x_k in  0pi ^d  k=0ldotsM-1, and coefficients f_j in mathbbC j in I_M^l. The algorithm for the fast evaluation of ","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"\th(k) coloneqq sum^M-1_ j = 0 h_j  sin(k  x_j) quad k = 0 ldots N-1","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"with nonequispaced nodes x_j in  0pi   j=0ldotsM-1 can easily be derived from the duality of the two problems.","category":"page"},{"location":"NFST.html#Functions","page":"NFST","title":"Functions","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"  \tnfst_finalize_plan\n    nfst_init\n    nfst_trafo\n    nfst_adjoint\n    nfst_trafo_direct\n    nfst_adjoint_direct","category":"page"},{"location":"NFST.html#NFFT3.nfst_finalize_plan","page":"NFST","title":"NFFT3.nfst_finalize_plan","text":"nfst_finalize_plan(P)\n\ndestroys a NFST plan structure.\n\nInput\n\nP - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_init\n\n\n\n\n\n","category":"function"},{"location":"NFST.html#NFFT3.nfst_init","page":"NFST","title":"NFFT3.nfst_init","text":"nfst_init(P)\n\nintialises a transform plan.\n\nInput\n\np - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_finalize_plan\n\n\n\n\n\n","category":"function"},{"location":"NFST.html#NFFT3.nfst_trafo","page":"NFST","title":"NFFT3.nfst_trafo","text":"nfst_trafo(P)\n\ncomputes a NFST.\n\nInput\n\nP - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_trafo_direct\n\n\n\n\n\n","category":"function"},{"location":"NFST.html#NFFT3.nfst_adjoint","page":"NFST","title":"NFFT3.nfst_adjoint","text":"nfst_adjoint(P)\n\ncomputes an adjoint NFST.\n\nInput\n\nP - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_adjoint_direct\n\n\n\n\n\n","category":"function"},{"location":"NFST.html#NFFT3.nfst_trafo_direct","page":"NFST","title":"NFFT3.nfst_trafo_direct","text":"nfst_trafo_direct(P)\n\ncomputes a NFST.\n\nInput\n\nP - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_trafo\n\n\n\n\n\n","category":"function"},{"location":"NFST.html#NFFT3.nfst_adjoint_direct","page":"NFST","title":"NFFT3.nfst_adjoint_direct","text":"nfst_adjoint_direct(P)\n\ncomputes an adjoint NFST.\n\nInput\n\nP - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_adjoint\n\n\n\n\n\n","category":"function"},{"location":"about.html#About","page":"About","title":"About","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"NFFT3.jl inherited its name from the NFFT3, a C subroutine library . It is currently maintained by Michael Schmischke (michael.schmischke@math.tu-chemnitz.de) with contributions from Tom-Christian Riemer, Toni Volkmer, and Felix Bartel.","category":"page"},{"location":"about.html","page":"About","title":"About","text":"If you want to contribute or have any questions, visit the GitHub repository to clone/fork the repository or open an issue.","category":"page"},{"location":"fastsum.html#fastsum","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"","category":"section"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    CurrentModule = NFFT3","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    FASTSUM","category":"page"},{"location":"fastsum.html#NFFT3.FASTSUM","page":"Fast Summation Algorithm","title":"NFFT3.FASTSUM","text":"FASTSUM\n\nThe fast summation algorithm evaluates the function\n\nf (y) coloneqq sum^N_k = 1 alpha_k mathscrK (y - x_k) = sum^N_k = 1 alpha_k K (lVert y - x_k rVert_2)\n\nfor given (nonequispaced) source knots x_k in mathbbR^d  k = 1 cdots N and a given kernel function mathscrK (cdot) = K (lVert cdot rVert_2)  x in mathbbR^d, which is an even, real univariate function which is infinitely differentiable at least in mathbbR setminus  0 . If K is infinitely differentiable at zero as well, then mathscrK is defined on mathbbR^d and is called nonsingular kernel function. The evaluation is done at M different points y_j in mathbbR^d  j = 1 cdots M. \n\nFields\n\nd - dimension.\nN - number of source nodes.\nM - number of target nodes.\nn - expansion degree.\np - degree of smoothness.\nkernel - name of kernel.\nc - kernel parameters.\neps_I - inner boundary.\neps_B - outer boundary.\nnn_x - oversampled nn in x.\nnn_y - oversampled nn in y.\nm_x - NFFT-cutoff in x.\nm_y - NFFT-cutoff in y.\ninit_done - bool for plan init.\nfinalized - bool for finalizer.\nflags - flags.\nx - source nodes.\ny - target nodes.\nalpha - source coefficients.\nf - target evaluations.\nplan - plan (C pointer).\n\nConstructor\n\nFASTSUM(d::Integer,N::Integer,M::Integer,n::Integer,p::Integer,kernel::String,c::Vector{<:Real},eps_I::Real,eps_B::Real,nn_x::Integer,nn_y::Integer,m_x::Integer,m_y::Integer,flags::UInt32)\n\nAdditional Constructor\n\nFASTSUM(d::Integer,N::Integer,M::Integer,n::Integer,p::Integer,kernel::String,c::Real,eps_I::Real,eps_B::Real,nn::Integer,m::Integer)\n\nSee also\n\nNFFT\n\n\n\n\n\n","category":"type"},{"location":"fastsum.html#Fast-Summation-at-Nonequispaced-Knots","page":"Fast Summation Algorithm","title":"Fast Summation at Nonequispaced Knots","text":"","category":"section"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"The fast summation algorithm evaluates the function ","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    f(y) coloneqq sum_k=1^M_1 alpha_k  mathscrK (y-x_k)","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"for given (nonequispaced) source knots x_k in mathbbR^d k = 1 ldots M_1 and a given kernel function mathscrK (x) coloneqq K(lVert x rVert_2) x in mathbbR^d. Here, K is required to be infinitely differentiable at x in mathbbR setminus  0 . If K is even infinitely differentiable at 0, mathscrK is called nonsingular kernel function, otherwise singular kernel function.  \nThe evaluation is done at M_2 different points y_j in mathbbR^d j=0 ldots M_2. W.l.o.g. we assume y_j neq x_i   (jneq i), i.e., one wants to compute","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    f(y_j) coloneqq sum_k=1^M_1 alpha_k  mathscrK (y_j-x_k) qquad j=1ldotsM_2","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"We replace mathscrK in the definition above by a periodic function. Hence, we assume lVert y_k rVert_2 leq frac12  (pi - varepsilon_B) and lVert x_k rVert_2 leq frac12  (pi - varepsilon_B) with varepsilon_B in (0pi). By the triangle inequality, we conclude ","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    y_j-x_i in -pi+varepsilon_B pi-varepsilon_B","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"Next, we regularize the kernel near zero and pm pi:","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    K_R (x) coloneqq begincases T_I(x)  lvert x rvert  varepsilon_I  K(x)  varepsilon_I  lvert x rvert leq pi - varepsilon_B  T_B(lvert x rvert)  pi - varepsilon_B  lvert x rvert leq pi endcases","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"With lvert x rvert coloneqq (lvert x_k rvert)_k=0^N-1 we mean to componentwise absolute value and T_I T_B in mathcalP_2p-1 are chosen such that the 2pi-periodic extension of K_R is of class mathcalC^p-1. Further details about the computation of T_I T_B are given in Chapter 7.5, [Plonka, Potts, Steidl, Tasche, 2018].  \nWe define ","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    mathscrK_R (x) coloneqq begincases K_R (lVert x rVert_2)  lVert x rVert  pi  T_B (pi)  lVert x rVert_2 geq pi endcases","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"Since mathscrK_R is sufficiently smooth, we replace it by its partial sum  mathscrK_RF (x) coloneqq sum_pmbl in I_n^d b_pmblmathrme^mathrmi  pmbl cdot x and obtain mathscrK approx mathscrK - mathscrK_R + mathscrK_RF. Using quadrature rules, we replace b_pmbl by","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    b_pmbl coloneqq frac1n^d sum_j in I_n^d mathscrK_R(frac2 pi jn) mathrme^-2 pi j * pmbl  n quad pmbl in I_n^d coloneqq - fracn2fracn2 ^d cap mathbbZ^d ","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"Hence, we have to compute the nearfield sum","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    f_NE (x) coloneqq sum_k=1^M_1 alpha_k mathscrK_NE (x-x_k) quad mathscrK_NE coloneqq mathscrK - mathscrK_R","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"and the far field sum","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    f_RF (x) coloneqq sum_k=1^M_1 alpha_k mathscrK_RF (x-x_k)","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"and approximate f by tildef coloneqq f_NE + f_RF. \nFrom y_j-x_i in -pi+varepsilon_B pi-varepsilon_B and the definition of K_R (cdot) we conclude that for the evaluation of f_NE we only need to consider  x fulfilling lVert x rVert leq varepsilon_I. Assuming a certain kind of uniform distribution of the x_k y_i, we obtain an arithmetic cost of mathcalO(M_2). \nFor the evaluation of f_RF(cdot), we rearrange the sums","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"    f_RF(y)= sum_k=1^M_1 alpha_k sum_pmbl in I_n^d b_pmbl  mathrme^ mathrmi  pmbl cdot ( y - x_k ) = sum_pmbl in I_n^d b_pmbl (sum_k=1^M_1 alpha_k  mathrme^- mathrmi pmbl x_k) mathrme^mathrmi  pmbl cdot y","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"where the inner sum can be computed by a NFFT^mathrmT which is then followed by a NFFT for the computation of the outer sum. ","category":"page"},{"location":"fastsum.html#Pseudocode","page":"Fast Summation Algorithm","title":"Pseudocode","text":"","category":"section"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"Input: alpha_k in mathbbC text for  k = 1 ldots M_1  x_k in mathbbR^d text for  k = 1 ldots M_1 text with  lVert x_k rVert_2 leq frac12  (pi - varepsilon_B)  y_j in mathbbR^d text for  j = 1 ldots M_2 text with  lVert y_j rVert_2 leq frac12  (pi - varepsilon_B)","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"Precomputation: Compute the polynomials T_I and T_B. Compute (b_pmbl)_pmbl in I^d_n. Compute mathscrK_NE (y_j - x_k) text for  j = 1 ldots M_2 text and  k in I^NE_varepsilon_I(j) text where  I^NE_varepsilon_I(j) coloneqq  k in  1 ldots M_1  colon lVert y_j - x_k rVert_2  varepsilon_I .","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"For each pmbl in I^d_n compute alpha_pmbl coloneqq sum^M_1_k = 1 alpha_k e^ - mathrmi  pmbl cdot x_k using the d-variate NFFT^mathrmT of size n times ldots times n, see Algorithm 7.3 in [Plonka, Potts, Steidl, Tasche, 2018].\nFor each pmbl in I^d_n compute the products d_pmbl coloneqq a_pmbl b_pmbl.\nFor j = 1 ldots M_2 compute the far field sums f_RF(y_j) = sum_pmbl in I_n^d d_pmbl  mathrme^ mathrmi  pmbl cdot y_j using the d-variate NFFT of size n times ldots times n, see Algorithm 7.1 in [Plonka, Potts, Steidl, Tasche, 2018].\nFor j = 1 ldots M_2 compute the near field sums f_NE (y_j) coloneqq sum_k in I^NE_varepsilon_I(j) alpha_k mathscrK_NE (y_j - x_k).\nFor j = 1 ldots M_2 compute the near field corrections tildef(y_j) coloneqq f_NE(y_j) + f_RF(y_j).","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"Output: tildef(y_j)  j = 1 ldots M_2, approximate values of f(y_j).","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"Computational cost: mathcalO(m^d (M_1+M_2)+ n^d log n) ","category":"page"},{"location":"fastsum.html#Functions","page":"Fast Summation Algorithm","title":"Functions","text":"","category":"section"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"  \tfastsum_init\n    fastsum_finalize_plan\n    fastsum_trafo\n    fastsum_trafo_exact","category":"page"},{"location":"fastsum.html#NFFT3.fastsum_init","page":"Fast Summation Algorithm","title":"NFFT3.fastsum_init","text":"fastsum_init(P)\n\nintialises a transform plan.\n\nInput\n\nP - a FASTSUM plan structure.\n\nSee also\n\nFASTSUM{D}, fastsum_finalize_plan\n\n\n\n\n\n","category":"function"},{"location":"fastsum.html#NFFT3.fastsum_finalize_plan","page":"Fast Summation Algorithm","title":"NFFT3.fastsum_finalize_plan","text":"fastsum_finalize_plan(P)\n\ndestroys a FASTSUM plan structure.\n\nInput\n\nP - a FASTSUM plan structure.\n\nSee also\n\nFASTSUM{D}, fastsum_init\n\n\n\n\n\n","category":"function"},{"location":"fastsum.html#NFFT3.fastsum_trafo","page":"Fast Summation Algorithm","title":"NFFT3.fastsum_trafo","text":"fastsum_trafo(P)\n\nfast NFFT-based summation.\n\nInput\n\nP - a FASTSUM plan structure.\n\nSee also\n\nFASTSUM{D}, fastsum_trafo_exact\n\n\n\n\n\n","category":"function"},{"location":"fastsum.html#NFFT3.fastsum_trafo_exact","page":"Fast Summation Algorithm","title":"NFFT3.fastsum_trafo_exact","text":"fastsum_trafo_exact(P)\n\ndirect computation of sums.\n\nInput\n\nP - a FASTSUM plan structure.\n\nSee also\n\nFASTSUM{D}, fastsum_trafo\n\n\n\n\n\n","category":"function"},{"location":"fastsum.html#Literature","page":"Fast Summation Algorithm","title":"Literature","text":"","category":"section"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"<ul>\n<li id=\"PlonkaPottsSteidlTasche2018\">[<a>Plonka, Potts, Steidl, Tasche, 2018</a>]\n  G. Plonka, D. Potts, G. Steidl and M. Tasche. Numerical Fourier Analysis: Theory and Applications.</emph>\n  Springer Nature Switzerland AG, 2018.\n  doi: <a href=\"https://doi.org/10.1007/978-3-030-04306-3\">10.1007/978-3-030-04306-3</a>.\n</li>\n</ul>","category":"page"},{"location":"fastsum.html","page":"Fast Summation Algorithm","title":"Fast Summation Algorithm","text":"<ul>\n<li id=\"Schmischke2018\">[<a>Schmischke, 2018</a>]\n  M. Schmischke. Nonequispaced Fast Fourier Transform (NFFT) Interface for Julia.</emph>\n  2018.\n  arXiv: <a href=\"https://arxiv.org/abs/1810.09891\">1512.02814</a>.\n</li>\n</ul>","category":"page"},{"location":"NFFT.html#NFFT_site","page":"NFFT","title":"Nonequispaced Fast Fourier Transform (NFFT)","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"    CurrentModule = NFFT3","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"The nonequispaced fast Fourier transform Keiner, Kunis, Potts, 2006 overcomes one of the main shortcomings of the FFT - the need for an equispaced sampling grid. Considering the evaluation of the d-dimensional trigonometric polynomial","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  f colon mathbbT^d to mathbbC  pmbx mapsto sum_pmbk in I_N hatf_pmbk mathrme^-2 pi mathrmi  pmbk cdot pmbx","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"with multibandlimit pmbN in 2 mathbbN^d and index set","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  I_N coloneqq  pmbk in mathbbZ^d - fracN_i2 leq k_i leq fracN_i2 - 1  forall i in  12ldots d  ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"The first approximation is a linear combination of a shifted periodized window function tildevarphi","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  s_1(pmbx) = sum_pmbell in I_pmbn g_pmbell tildevarphi left( pmbx - frac1pmbn odot pmbell right)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"where frac1pmbn is the elementwise inversion of the vector pmbn. We choose an oversampling vector pmbsigma  1 componentwise and obtain the index set by","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  pmbn coloneqq pmbsigma odot pmbN","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Here, odot denotes the componentwise product. Note that one could skip the choice of pmbsigma entirely and directly choose n_i  N_i for i= 1 2 ldotsd. The standard choice in the C library is at the moment ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  n_i = 2^lceil log_2 N_i rceil + 1 i= 1 2 ldots d ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"If the window function varphi R^d to R has a one-periodization ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  tildevarphi(pmbx) = sum_pmbr in mathbbZ^d varphi(pmbx+pmbr) ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"with a uniformly convergent Fourier series, we use the Poisson summation formula and obtain the Fourier coefficients ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  c_pmbk(tildevarphi) = hatvarphi(pmbk)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Here, hatvarphi is the Fourier transform of varphi defined by","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  hatvarphi(pmbk) = int_mathbbT^d varphi(pmbx) mathrme^-2 pi mathrmi  pmbk cdot pmbx mathrmd pmbx","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Replacing tildevarphi by its Fourier series and splitting the sum in s_1(x) yields","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"beginaligned\n  s_1(pmbx)  = sum_pmbell in I_pmbn g_pmbell sum_pmbk in mathbbZ^d c_pmbk(tildevarphi) mathrme^-2 pi mathrmi  pmbk cdot left( pmbx - frac1pmbn odot pmbellright)   \n\t = sum_pmbk in mathbbZ^d c_pmbk (tildevarphi) underbrace left(sum_pmbell in I_pmbn g_pmbell mathrme^2 pi mathrmi  frac1pmbn odot (pmbk cdot pmbell) right)_ eqqcolon hatg_pmbk mathrme^-2 pi mathrmi  pmbk cdot pmbx \n\t = sum_pmbk in I_pmbn c_pmbk(tildevarphi) hatg_pmbk mathrme^-2 pi mathrmi  pmbk cdot pmbx  + sum_pmbr in mathbbZ^d setminus  pmb0  sum_pmbk in I_pmbn c_pmbk(tildevarphi) hatg_pmbk mathrme^-2 pi mathrmi  (pmbk + pmbn odot pmbr)cdot pmbx \nendaligned","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Furthermore, a comparison of the equation above and f suggests the choice","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  hatg_pmbk = begincases frachatf_pmbkc_pmbk(tildevarphi) quad textfor  pmbk in I_pmbN  0 textfor  pmbk in I_pmbn setminus I_pmbN endcases","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Now, we are able to compute g_pmbell by an FFT of size n_1 times n_2 times cdots times n_d. The error of the first approximation f approx s_1 is called aliasing error. For further analysis, we refer to Chapter 7 in [Plonka, Potts, Steidl, Tasche, 2018]. \nWe obtain an approximation psi for varphi if the window function is well localized in the spatial domain by the truncation","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  psi(pmbx) coloneqq varphi(pmbx) mathbb1_times_i = 1^d -mn_imn_i(pmbx)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"with a chosen window size m ll min_iin12dotsdn_i m in mathbbN. Following the same scheme as above, we can use the periodization ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  tildepsi(pmbx) = sum_pmbr in mathbbZ^d psi(pmbx+pmbr) ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"and look at the linear combination ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  s(pmbx_j) coloneqq sum_pmbell in I_pmbn g_pmbell tildepsi left( pmbx_j - frac1pmbn odot pmbell right)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"The following calculations show that s approx s_1","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"beginaligned\n  s(pmbx_j) = sum_pmbell in I_pmbn g_pmbell sum_pmbr in mathbbZ^d psi left( pmbx_j - frac1pmbn odot pmbell + pmbr right) \n  = sum_pmbell in I_pmbn g_pmbell sum_pmbr in mathbbZ^d varphi left(pmbx_j - frac1pmbn odot pmbell + pmbr right) mathbb1_times_i = 1^d -mn_imn_i(pmbx_j) \n  = sum_ell in I_n g_pmbell mathbb1_times_i = 1^d -mn_imn_i(pmbx_j) tildevarphi left(pmbx_j - frac1pmbn odot pmbell right) \n  = sum_pmbell in I_pmbnm (pmbx_j) g_pmbell tildevarphi left(pmbx_j - frac1pmbn odot pmbell right)\nendaligned","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"with the index set ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  I_pmbnm(pmbx_j) =  pmbell in I_pmbn colon pmbn odot pmbx_j - m pmb1 leq pmbell leq pmbn odot pmbx_j +m pmb1 ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"for a fixed node pmbx_j. This is motivated by ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  -fracmn_i leq left( pmbx_j right)_i leq fracmn_i ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"in order to ensure that pmbx_j is within the support. This second approximation error is called the truncation error. Summarizing, we have f approx s_1 approx s.","category":"page"},{"location":"NFFT.html#Pseudocode","page":"NFFT","title":"Pseudocode","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Input: N M in mathbbN  sigma  1  m in mathbbN  x_j in mathbbT^d text for  j in I^1_M  f_k in mathbbC text for  k in I^d_N","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Precomputation: Compute the nonzero Fourier coefficients c_k(tildevarphi) text for all  k in I^d_N Compute the values tildepsi (x_j -fracpi pmblsigma N) text for  j in I^1_M text and  pmbl in I_sigma N  m (x_j)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Set hatg_k coloneqq hatf_k  c_k(tildevarphi) text for  k in I^d_N \nCompute g_pmbl = frac1(sigma N)^d sum_k in I^d_N hatg_k e^2 mathrmi  k cdot pmbl  (sigma N) quad pmbl in I^d_sigma N using a d-variate FFT. \nCompute s(x_j) coloneqq sum_pmbl in I_sigma N  m (x_j) g_pmbl  tildepsi(x_j -fracpi pmblsigma N) quad in I^1_M.","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Output: s(x_j)  j in I^1_M, approximate values of f(x_j).","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Computational cost: mathcalO(N^d logN + m^d  M) ","category":"page"},{"location":"NFFT.html#Adjoint-Problem","page":"NFFT","title":"Adjoint Problem","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Using the transposed index set ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  I_pmbnm^top(pmbell) =  j= 0 1 ldots M-1  pmbell - mpmb1 leq pmbn odot pmbx_j leq pmbell + m pmb1 ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"we obtain the adjoint NFFT algorithm for the fast evaluation the of","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"\thath_pmbk = sum_j = 0^M-1 f_j mathrme^2 pi  mathrmi  pmbk  pmbx_j pmbk in I_pmbN","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"for given coefficients f_j in mathbbC.","category":"page"},{"location":"NFFT.html#Plan-Structure","page":"NFFT","title":"Plan Structure","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"    NFFT{D}","category":"page"},{"location":"NFFT.html#NFFT3.NFFT","page":"NFFT","title":"NFFT3.NFFT","text":"NFFT{D}\n\nA NFFT (nonequispaced fast Fourier transform) plan, where D is the dimension. \n\nConsidering a D-dimensional trigonometric polynomial\n\nf colon mathbbT^D to mathbbC  f(x) colon = sum_k in I_N hatf_k e^-2 pi mathrmi mathbfk cdot mathbfx\n\nwith an index set I_N colon =  k in mathbbZ^D colon - fracN_i2 leq k_i leq fracN_i2 - 1  i = 0 cdots D-1  where N in 2 mathbbN^D is the multibandlimit.  The NDFT (non uniform discrete fourier transform) is its evaluation at M in 2 mathbbN nonequispaced points x_j in mathbbT^D for j = 0 1 cdots M,\n\nf(x_j) colon = sum_k in I_N hatf_k e^-2 pi mathrmi mathbfk cdot mathbfx_j\n\nwith given coefficients hatf_k in mathbbC where we identify the smooth manifold of the torus mathbbT with 12 12). The NFFT is an algorithm for the fast evaluation of the NDFT and the adjoint problem, the fast evaluation of the adjoint NDFT\n\nhath_k colon = sum^M-1_j = 0 f_j e^-2 pi mathrmi mathbfk cdot mathbfx_j  k in I_N\n\nfor given coefficients f_j in mathbbC. In general, the adjoint NDFT is not the inverse transform of the NDFT.\n\nFields\n\nN - the multibandlimit.\nM - the number of nodes.\nn - the oversampling per dimension.\nm - the window size. Larger m means more accuracy but also more computational costs. \nf1 - the NFFT flags.\nf2 - the FFTW flags.\ninit_done - indicates if the plan is initialized.\nfinalized - indicates if the plan is finalized.\nx - the nodes.\nf - the function values.\nfhat - the Fourier coefficients.\nplan - plan (C pointer).\n\nConstructor\n\nNFFT{D}( N::NTuple{D,Int32}, M::Int32, n::NTuple{D,Int32}, m::Int32, f1::UInt32, f2::UInt32 ) where D\n\nAdditional Constructor\n\nNFFT( N::NTuple{D,Int32}, M::Int32, n::NTuple{D,Int32}, m::Int32, f1::UInt32, f2::UInt32 ) where {D}\nNFFT( N::NTuple{D,Int32}, M::Int32 ) where {D}\n\n\n\n\n\n","category":"type"},{"location":"NFFT.html#Functions","page":"NFFT","title":"Functions","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  \tnfft_finalize_plan\n    nfft_init\n    nfft_trafo\n    nfft_adjoint\n    nfft_trafo_direct\n    nfft_adjoint_direct","category":"page"},{"location":"NFFT.html#NFFT3.nfft_finalize_plan","page":"NFFT","title":"NFFT3.nfft_finalize_plan","text":"nfft_finalize_plan(P)\n\ndestroys a NFFT plan structure.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_init\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_init","page":"NFFT","title":"NFFT3.nfft_init","text":"nfft_init(P)\n\nintialises a transform plan.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_finalize_plan\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_trafo","page":"NFFT","title":"NFFT3.nfft_trafo","text":"nfft_trafo(P)\n\ncomputes a NFFT.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_trafo_direct\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_adjoint","page":"NFFT","title":"NFFT3.nfft_adjoint","text":"nfft_adjoint(P)\n\ncomputes an adjoint NFFT.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_adjoint_direct\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_trafo_direct","page":"NFFT","title":"NFFT3.nfft_trafo_direct","text":"nfft_trafo_direct(P)\n\ncomputes a NFFT.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, trafo\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_adjoint_direct","page":"NFFT","title":"NFFT3.nfft_adjoint_direct","text":"nfft_adjoint_direct(P)\n\ncomputes an adjoint NFFT.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, adjoint\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#Literature","page":"NFFT","title":"Literature","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"<ul>\n<li id=\"KeinerKunisPotts2006\">[<a>Keiner, Kunis, Potts, 2006</a>]\n  J. Keiner, S. Kunis, and D. Potts. Fast summation of radial functions on the sphere. Computing, 78:1–15, 2006.\n</li>\n</ul>","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"<ul>\n<li id=\"PlonkaPottsSteidlTasche2018\">[<a>Plonka, Potts, Steidl, Tasche, 2018</a>]\n  G. Plonka, D. Potts, G. Steidl and M. Tasche. Numerical Fourier Analysis: Theory and Applications.</emph>\n  Springer Nature Switzerland AG, 2018.\n  doi: <a href=\"https://doi.org/10.1007/978-3-030-04306-3\">10.1007/978-3-030-04306-3</a>.\n</li>\n</ul>","category":"page"},{"location":"index.html#Welcome-to-NFFT3.jl","page":"Home","title":"Welcome to NFFT3.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The nonequispaced fast Fourier transform or NFFT, see [Keiner, Kunis, Potts, 2006] and [Plonka, Potts, Steidl, Tasche, 2018], overcomes one of the main shortcomings of the FFT - the need for an equispaced sampling grid. Considering a d-dimensional trigonometric polynomial ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"  \tf(pmbx) coloneqq sum_ pmbk in I_pmbN hatf_pmbk mathrme^-2pimathrmi pmbkpmbx","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"with an index set I_pmbN coloneqq  pmbk in mathbbZ^d -fracN_i2 leq pmbk_i leq fracN_i2-1 i=0ldotsd-1  where pmbN in 2mathbbN^d is the multibandlimit, the nonequispaced fast Fourier transform (NDFT) is its evaluation at M in mathbbN nonequispaced points pmbx_j in mathbbT^d for j = 0 1 ldots M,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"  \tf(pmbx_j) =sum_pmbk in I_pmbN hatf_pmbk mathrme^-2 pi mathrmi pmbk cdot pmbx_j","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"with given coefficients hatf_pmbk in mathbbC where we identify the smooth manifold of the torus mathbbT with -12 12). The NFFT is an algorithm for the fast evaluation of the sums f(pmbx_j) as well as the adjoint problem, the fast evaluation of","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"\thath_pmbk = sum_j = 0^M-1 f_j mathrme^2 pi mathrmi pmbk pmbx_j pmbk in I_pmbN","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"for given coefficients f_j in mathbbC. The available NFFT3 library [Keiner, Kunis, Potts, NFFT3] provides C routines for the NFFT, applications such as the fast evaluation of sums","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"  \tg(pmby_j) coloneqq sum_k=1^N alpha_k K(lVert pmby_j - pmbx_k rVert_2) j = 1 ldots M","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"for given coefficients alpha_k in mathbbC, nodes pmbx_kpmby_j in R^d  and a radial kernel function K 0infty) to 0infty), and generalizations such as the NNFFT for nonequispaced nodes in time and frequency domain. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The NFFT3 C library has been developed at the Mathematical Institute of the University of Luebeck, at the Mathematical Institute of the University Osnabrueck and at the Faculty of Mathematics of the Chemnitz University of Technology by Jens Keiner, Stefan Kunis and Daniel Potts. Further contributions, in particular applications, are due to Dr. Markus Fenn, Steffen Klatt, Tobias Knopp and Antje Vollrath. The support for OpenMP was developed by Toni Volkmer. Many contributions to the release 3.3.* and later have been done by Toni Volkmer, Michael Quellmalz, and Michael Schmischke.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This package offers a Julia wrapper for the NFFT, NFCT, NFST, and fastsum algorithms, see [Schmischke, 2018]","category":"page"},{"location":"index.html#Literature","page":"Home","title":"Literature","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"<ul>\n<li id=\"PlonkaPottsSteidlTasche2018\">[<a>Plonka, Potts, Steidl, Tasche, 2018</a>]\n  G. Plonka, D. Potts, G. Steidl and M. Tasche. Numerical Fourier Analysis: Theory and Applications.</emph>\n  Springer Nature Switzerland AG, 2018.\n  doi: <a href=\"https://doi.org/10.1007/978-3-030-04306-3\">10.1007/978-3-030-04306-3</a>.\n</li>\n</ul>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<ul>\n<li id=\"Schmischke2018\">[<a>Schmischke, 2018</a>]\n  M. Schmischke. Nonequispaced Fast Fourier Transform (NFFT) Interface for Julia.</emph>\n  2018.\n  arXiv: <a href=\"https://arxiv.org/abs/1810.09891\">1512.02814</a>.\n</li>\n</ul>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<ul>\n<li id=\"KeinerKunisPotts2006\">[<a>Keiner, Kunis, Potts, 2006</a>]\n  J. Keiner, S. Kunis, and D. Potts. Fast summation of radial functions on the sphere. </emph>\n  Computing, 78:1--15, 2006.\n  doi: <a href=\"https://doi.org/10.1007/s00607-006-0169-z\">1512.02814</a>.\n</li>\n</ul>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<ul>\n<li id=\"KeinerKunisPottsNFFT3\">[<a>Keiner, Kunis, Potts, NFFT3</a>]\n  J. Keiner, S. Kunis, and D. Potts. NFFT 3.0, C subroutine library. </emph>\n  url: <a href=\"http://www.tu-chemnitz.de/~potts/nfft\">1512.02814</a>.\n</li>\n</ul>","category":"page"},{"location":"notation.html#Notation","page":"Notation","title":"Notation","text":"","category":"section"}]
}

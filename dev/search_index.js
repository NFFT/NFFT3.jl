var documenterSearchIndex = {"docs":
[{"location":"Flags.html#Flags","page":"Flags","title":"Flags","text":"","category":"section"},{"location":"Flags.html","page":"Flags","title":"Flags","text":"PRE_PHI_HUT\nFG_PSI\nPRE_LIN_PSI\nPRE_FG_PSI\nPRE_PSI\nPRE_FULL_PSI\nMALLOC_X\nMALLOC_F_HAT\nMALLOC_F\nFFT_OUT_OF_PLACE\nFFTW_INIT\nNFFT_SORT_NODES\nNFFT_OMP_BLOCKWISE_ADJOINT\nNFCT_SORT_NODES\nNFCT_OMP_BLOCKWISE_ADJOINT\nNFST_SORT_NODES\nNFST_OMP_BLOCKWISE_ADJOINT\nFFTW_MEASURE\nFFTW_DESTROY_INPUT\nFFTW_UNALIGNED\nFFTW_CONSERVE_MEMORY\nFFTW_EXHAUSTIVE\nFFTW_PRESERVE_INPUT\nFFTW_PATIENT\nFFTW_ESTIMATE\nFFTW_WISDOM_ONLY","category":"page"},{"location":"Flags.html#NFFT3.PRE_PHI_HUT","page":"Flags","title":"NFFT3.PRE_PHI_HUT","text":"PRE_PHI_HUT\n\nprecompute and store values hatphi(k) of the Fourier transform of the window function hatphi.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FG_PSI","page":"Flags","title":"NFFT3.FG_PSI","text":"FG_PSI\n\nfast Gaussian gridding.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.PRE_LIN_PSI","page":"Flags","title":"NFFT3.PRE_LIN_PSI","text":"PRE_LIN_PSI\n\nlinear interpolation of the window function from a lookup table.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.PRE_FG_PSI","page":"Flags","title":"NFFT3.PRE_FG_PSI","text":"PRE_FG_PSI\n\nfast Gaussian gridding.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.PRE_PSI","page":"Flags","title":"NFFT3.PRE_PSI","text":"PRE_PSI\n\nprecomputation based on tensor product structure of the window function.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.PRE_FULL_PSI","page":"Flags","title":"NFFT3.PRE_FULL_PSI","text":"PRE_FULL_PSI\n\ncalculate and store all values tildepsi(x_j - frac1n odot l).\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.MALLOC_X","page":"Flags","title":"NFFT3.MALLOC_X","text":"MALLOC_X\n\nallocate memory for node x_j.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.MALLOC_F_HAT","page":"Flags","title":"NFFT3.MALLOC_F_HAT","text":"MALLOC_F_HAT\n\nallocate memory for coefficienthatf_k.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.MALLOC_F","page":"Flags","title":"NFFT3.MALLOC_F","text":"MALLOC_F\n\nallocate memory for approximate function value f_j.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFT_OUT_OF_PLACE","page":"Flags","title":"NFFT3.FFT_OUT_OF_PLACE","text":"FFT_OUT_OF_PLACE\n\nFFTW uses disjoint input/output vector.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_INIT","page":"Flags","title":"NFFT3.FFTW_INIT","text":"FFTW_INIT\n\ninitialize FFTW plan.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFFT_SORT_NODES","page":"Flags","title":"NFFT3.NFFT_SORT_NODES","text":"NFFT_SORT_NODES\n\ninternal sorting of the nodes x_j that may increase performance.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFFT_OMP_BLOCKWISE_ADJOINT","page":"Flags","title":"NFFT3.NFFT_OMP_BLOCKWISE_ADJOINT","text":"NFFT_OMP_BLOCKWISE_ADJOINT\n\nblockwise calculation for adjoint NFFT in the case of OpenMP.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFCT_SORT_NODES","page":"Flags","title":"NFFT3.NFCT_SORT_NODES","text":"NFCT_SORT_NODES\n\ninternal sorting of the nodes x_j that may increase performance.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFCT_OMP_BLOCKWISE_ADJOINT","page":"Flags","title":"NFFT3.NFCT_OMP_BLOCKWISE_ADJOINT","text":"NFCT_OMP_BLOCKWISE_ADJOINT\n\nblockwise calculation for adjoint NFFT in the case of OpenMP.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFST_SORT_NODES","page":"Flags","title":"NFFT3.NFST_SORT_NODES","text":"NFST_SORT_NODES\n\ninternal sorting of the nodes x_j that may increase performance.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.NFST_OMP_BLOCKWISE_ADJOINT","page":"Flags","title":"NFFT3.NFST_OMP_BLOCKWISE_ADJOINT","text":"NFST_OMP_BLOCKWISE_ADJOINT\n\nblockwise calculation for adjoint NFFT in the case of OpenMP.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_MEASURE","page":"Flags","title":"NFFT3.FFTW_MEASURE","text":"FFTW_MEASURE\n\nfind optimal plan by executing several FFTs and compare times.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_DESTROY_INPUT","page":"Flags","title":"NFFT3.FFTW_DESTROY_INPUT","text":"FFTW_DESTROY_INPUT\n\nan out-of-place transform is allowed to overwrite the input array with arbitrary data.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_UNALIGNED","page":"Flags","title":"NFFT3.FFTW_UNALIGNED","text":"FFTW_UNALIGNED\n\nthe algorithm may not impose any unusual align\u0002ment requirements on the input/output arrays (not necessary in most context).\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_CONSERVE_MEMORY","page":"Flags","title":"NFFT3.FFTW_CONSERVE_MEMORY","text":"FFTW_CONSERVE_MEMORY\n\nconserving memory.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_EXHAUSTIVE","page":"Flags","title":"NFFT3.FFTW_EXHAUSTIVE","text":"FFTW_EXHAUSTIVE\n\nbehaves like FFTW_PATIENT with an even wider range of tests.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_PRESERVE_INPUT","page":"Flags","title":"NFFT3.FFTW_PRESERVE_INPUT","text":"FFTW_PRESERVE_INPUT\n\ninput vector is preserved and unchanged.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_PATIENT","page":"Flags","title":"NFFT3.FFTW_PATIENT","text":"FFTW_PATIENT\n\nbehaves like FFTW_MEASURE with a wider range of tests.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_ESTIMATE","page":"Flags","title":"NFFT3.FFTW_ESTIMATE","text":"FFTW_ESTIMATE\n\nuse simple heuristic instead of measurements to pick a plan.\n\n\n\n\n\n","category":"constant"},{"location":"Flags.html#NFFT3.FFTW_WISDOM_ONLY","page":"Flags","title":"NFFT3.FFTW_WISDOM_ONLY","text":"FFTW_WISDOM_ONLY\n\na plan is only created if wisdom from tests is available.\n\n\n\n\n\n","category":"constant"},{"location":"NFCT.html#NFCT_site","page":"NFCT","title":"Nonequispaced Fast Cosine Transform (NFCT)","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    CurrentModule = NFFT3","category":"page"},{"location":"NFCT.html#NDCT-and-NFCT","page":"NFCT","title":"NDCT and NFCT","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"We consider the even, 1-periodic trigonometric polynomial","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    f^c(pmbx) coloneqq sum_pmbk in I_pmbNmathrmc^d hatf_pmbk^c  cos(2pi  pmbk odot pmbx) quad pmbx in mathbbR^d","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"with multibandlimit pmbN in mathbbN^d and index set","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"  I_pmbNmathrmc^d coloneqq left pmbk in mathbbZ^d 0 leq k_i leq N_i - 1  i = 12ldotsd right","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"Note that we define cos(pmbk circ pmbx) coloneqq prod_i=1^d cos(k_i cdot x_i). The NDCT is the evaluation of","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"  f^c(pmbx_j) = sum_pmbk in I_pmbNmathrmc^d hatf_pmbk^c  cos(2pi  pmbk odot pmbx_j)","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"at arbitrary nodes pmbx_j in 005^d for given coefficients hatf_pmbk^c in mathbbR pmbk in I_pmbNmathrmc^d. Similarly to the NDFT, the transposed NDCT is the evaluation of","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"  hath^c_pmbk = sum_j=1^M f^c_j  cos(2pi  pmbk odot pmbx_j)","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"for the frequencies pmbk in I_pmbNmathrmc^d with given coefficients f^c_j in mathbbR j = 12ldotsM.","category":"page"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"We modify the NFFT in order to derive a fast algorithm for the computation of the NDCT and transposed NDCT, obtaining the NFCT and its transposed counterpart. For details we refer to Chapter 7 in [Plonka, Potts, Steidl, Tasche, 2018].","category":"page"},{"location":"NFCT.html#Plan-structure","page":"NFCT","title":"Plan structure","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    NFCT{D}","category":"page"},{"location":"NFCT.html#NFFT3.NFCT","page":"NFCT","title":"NFFT3.NFCT","text":"NFCT{D}\n\nA NFCT (nonequispaced fast cosine transform) plan, where D is the dimension. \n\nThe NFCT realizes a direct and fast computation of the discrete nonequispaced cosine transform. The aim is to compute\n\nf^c(pmbx_j) = sum_pmbk in I_pmbNmathrmc^D hatf_pmbk^c  cos(2pi  pmbk odot pmbx_j)\n\nat given arbitrary knots pmbx_j in 005^D j = 1 cdots M, for coefficients hatf^c_pmbk in mathbbR, pmbk in I_pmbNmathrmc^D coloneqq left pmbk in mathbbZ^D 1 leq k_i leq N_i - 1  i = 12ldotsD right, and a multibandlimit vector pmbN in mathbbN^D. Note that we define cos(pmbk circ pmbx) coloneqq prod_i=1^D cos(k_i cdot x_i). The transposed problem reads as\n\nhath^c_pmbk = sum_j=1^M f^c_j  cos(2pi  pmbk odot pmbx_j)\n\nfor the frequencies pmbk in I_pmbNmathrmc^D with given coefficients f^c_j in mathbbR j = 12ldotsM.\n\nFields\n\nN - the multibandlimit (N_1 N_2 ldots N_D) of the trigonometric polynomial f^s.\nM - the number of nodes.\nn - the oversampling (n_1 n_2 ldots n_D) per dimension.\nm - the window size. A larger m results in more accuracy but also a higher computational cost. \nf1 - the NFST flags.\nf2 - the FFTW flags.\ninit_done - indicates if the plan is initialized.\nfinalized - indicates if the plan is finalized.\nx - the nodes x_j in 005^D  j = 1 ldots M.\nf - the values f^c(pmbx_j) for the NFST or the coefficients f_j^c in mathbbR j = 1 ldots M for the transposed NFST.\nfhat - the Fourier coefficients hatf_pmbk^c in mathbbR for the NFST or the values hath_pmbk^c pmbk in I_pmbNmathrmc^D for the adjoint NFFT.\nplan - plan (C pointer).\n\nConstructor\n\nNFCT{D}( N::NTuple{D,Int32}, M::Int32, n::NTuple{D,Int32}, m::Int32, f1::UInt32, f2::UInt32 ) where {D}\n\nAdditional Constructor\n\nNFCT( N::NTuple{D,Int32}, M::Int32, n::NTuple{D,Int32}, m::Int32, f1::UInt32, f2::UInt32) where {D}\nNFCT( N::NTuple{D,Int32}, M::Int32) where {D}\n\nSee also\n\nNFFT\n\n\n\n\n\n","category":"type"},{"location":"NFCT.html#Functions","page":"NFCT","title":"Functions","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"    nfct_trafo\n    nfct_adjoint\n    nfct_trafo_direct\n    nfct_adjoint_direct\n  \tnfct_finalize_plan\n    nfct_init","category":"page"},{"location":"NFCT.html#NFFT3.nfct_trafo","page":"NFCT","title":"NFFT3.nfct_trafo","text":"nfct_trafo(P)\n\ncomputes the NDCT via the fast NFCT algorithm for provided nodes pmbx_j j =12dotsM in P.X and coefficients hatf_pmbk^c in mathbbR pmbk in I_pmbNmathrmc^D in P.fhat.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, nfct_trafo_direct\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#NFFT3.nfct_trafo_direct","page":"NFCT","title":"NFFT3.nfct_trafo_direct","text":"nfct_trafo_direct(P)\n\ncomputes the NDCT via naive matrix-vector multiplication for provided nodes pmbx_j j =12dotsM in P.X and coefficients hatf_pmbk^c in mathbbR pmbk in I_pmbNmathrmc^D in P.fhat.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, nfct_trafo\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#NFFT3.nfct_finalize_plan","page":"NFCT","title":"NFFT3.nfct_finalize_plan","text":"nfct_finalize_plan(P::NFCT{D})\n\ndestroys a NFCT plan structure.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, nfct_init\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#NFFT3.nfct_init","page":"NFCT","title":"NFFT3.nfct_init","text":"nfct_init(P)\n\nintialises the NFCT plan in C. This function does not have to be called by the user.\n\nInput\n\nP - a NFCT plan structure.\n\nSee also\n\nNFCT{D}, nfct_finalize_plan\n\n\n\n\n\n","category":"function"},{"location":"NFCT.html#Literature","page":"NFCT","title":"Literature","text":"","category":"section"},{"location":"NFCT.html","page":"NFCT","title":"NFCT","text":"<ul>\n<li id=\"PlonkaPottsSteidlTasche2018\">[<a>Plonka, Potts, Steidl, Tasche, 2018</a>]\n  G. Plonka, D. Potts, G. Steidl and M. Tasche. Numerical Fourier Analysis: Theory and Applications.</emph>\n  Springer Nature Switzerland AG, 2018.\n  doi: <a href=\"https://doi.org/10.1007/978-3-030-04306-3\">10.1007/978-3-030-04306-3</a>.\n</li>\n</ul>","category":"page"},{"location":"NFST.html#NFST_site","page":"NFST","title":"Nonequispaced Fast Sine Transform (NFST)","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"    CurrentModule = NFFT3","category":"page"},{"location":"NFST.html#NDST-and-NFST","page":"NFST","title":"NDST and NFST","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"We consider the odd, 1-periodic trigonometric polynomial","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"    f^s(pmbx) coloneqq sum_pmbk in I_pmbNmathrms^d hatf_pmbk^s  sin(2pi  pmbk odot pmbx) quad pmbx in mathbbR^d","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"with multibandlimit pmbN in mathbbN^d and index set","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"  I_pmbNmathrms^d coloneqq left pmbk in mathbbZ^d 1 leq k_i leq N_i - 1  i = 12ldotsd right","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"Note that we define sin(pmbk circ pmbx) coloneqq prod_i=1^d sin(k_i cdot x_i). The NDST is the evaluation of","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"  f^s(pmbx_j) = sum_pmbk in I_pmbNmathrms^d hatf_pmbk^s  sin(2pi  pmbk odot pmbx_j)","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"at arbitrary nodes pmbx_j in 005^d for given coefficients hatf_pmbk^s in mathbbR pmbk in I_pmbNmathrms^d. Similarly to the NDFT, the transposed NDST is the evaluation of","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"  hath^s_pmbk = sum_j=1^M f^s_j  sin(2pi  pmbk odot pmbx_j)","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"for the frequencies pmbk in I_pmbNmathrms^d with given coefficients f^s_j in mathbbR j = 12ldotsM.","category":"page"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"We modify the NFFT in order to derive a fast algorithm for the computation of the NDST and transposed NDST, obtaining the NFST and its transposed counterpart. For details we refer to Chapter 6 in [Plonka, Potts, Steidl, Tasche, 2018].","category":"page"},{"location":"NFST.html#Plan-structure","page":"NFST","title":"Plan structure","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"    NFST{D}","category":"page"},{"location":"NFST.html#NFFT3.NFST","page":"NFST","title":"NFFT3.NFST","text":"NFST{D}\n\nA NFST (nonequispaced fast sine transform) plan, where D is the dimension. \n\nThe NFST realizes a direct and fast computation of the discrete nonequispaced sine transform. The aim is to compute\n\nf^s(pmbx_j) = sum_pmbk in I_pmbNmathrms^D hatf_pmbk^s  sin(2pi  pmbk odot pmbx_j)\n\nat given arbitrary knots pmbx_j in 005^D j = 1 cdots M, for coefficients hatf^s_pmbk in mathbbR, pmbk in I_pmbNmathrms^D coloneqq left pmbk in mathbbZ^D 1 leq k_i leq N_i - 1  i = 12ldotsD right, and a multibandlimit vector pmbN in mathbbN^D. Note that we define sin(pmbk circ pmbx) coloneqq prod_i=1^D sin(k_i cdot x_i). The transposed problem reads as\n\nhath^s_pmbk = sum_j=1^M f^s_j  sin(2pi  pmbk odot pmbx_j)\n\nfor the frequencies pmbk in I_pmbNmathrms^D with given coefficients f^s_j in mathbbR j = 12ldotsM.\n\nFields\n\nN - the multibandlimit (N_1 N_2 ldots N_D) of the trigonometric polynomial f^s.\nM - the number of nodes.\nn - the oversampling (n_1 n_2 ldots n_D) per dimension.\nm - the window size. A larger m results in more accuracy but also a higher computational cost. \nf1 - the NFST flags.\nf2 - the FFTW flags.\ninit_done - indicates if the plan is initialized.\nfinalized - indicates if the plan is finalized.\nx - the nodes x_j in 005^D  j = 1 ldots M.\nf - the values f^s(pmbx_j) for the NFST or the coefficients f_j^s in mathbbR j = 1 ldots M for the transposed NFST.\nfhat - the Fourier coefficients hatf_pmbk^s in mathbbR for the NFST or the values hath_pmbk^s pmbk in I_pmbNmathrms^D for the adjoint NFFT.\nplan - plan (C pointer).\n\nConstructor\n\nNFST{D}( N::NTuple{D,Int32}, M::Int32, n::NTuple{D,Int32}, m::Int32, f1::UInt32, f2::UInt32 ) where {D}\n\nAdditional Constructor\n\nNFST( N::NTuple{D,Int32}, M::Int32, n::NTuple{D,Int32}, m::Int32, f1::UInt32, f2::UInt32) where {D}\nNFST( N::NTuple{D,Int32}, M::Int32) where {D}\n\nSee also\n\nNFFT\n\n\n\n\n\n","category":"type"},{"location":"NFST.html#Functions","page":"NFST","title":"Functions","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"    nfst_trafo\n    nfst_adjoint\n    nfst_trafo_direct\n    nfst_adjoint_direct\n  \tnfst_finalize_plan\n    nfst_init","category":"page"},{"location":"NFST.html#NFFT3.nfst_trafo","page":"NFST","title":"NFFT3.nfst_trafo","text":"nfst_trafo(P)\n\ncomputes the NDST via the fast NFST algorithm for provided nodes pmbx_j j =12dotsM in P.X and coefficients hatf_pmbk^s in mathbbR pmbk in I_pmbNs^D in P.fhat.\n\nInput\n\nP - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_trafo_direct\n\n\n\n\n\n","category":"function"},{"location":"NFST.html#NFFT3.nfst_trafo_direct","page":"NFST","title":"NFFT3.nfst_trafo_direct","text":"nfst_trafo_direct(P)\n\ncomputes the NDST via naive matrix-vector multiplication for provided nodes pmbx_j j =12dotsM in P.X and coefficients hatf_pmbk^s in mathbbR pmbk in I_pmbNs^D in P.fhat.\n\nInput\n\nP - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_trafo\n\n\n\n\n\n","category":"function"},{"location":"NFST.html#NFFT3.nfst_finalize_plan","page":"NFST","title":"NFFT3.nfst_finalize_plan","text":"nfst_finalize_plan(P)\n\ndestroys a NFST plan structure.\n\nInput\n\nP - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_init\n\n\n\n\n\n","category":"function"},{"location":"NFST.html#NFFT3.nfst_init","page":"NFST","title":"NFFT3.nfst_init","text":"nfst_init(P)\n\nintialises the NFST plan in C. This function does not have to be called by the user.\n\nInput\n\np - a NFST plan structure.\n\nSee also\n\nNFST{D}, nfst_finalize_plan\n\n\n\n\n\n","category":"function"},{"location":"NFST.html#Literature","page":"NFST","title":"Literature","text":"","category":"section"},{"location":"NFST.html","page":"NFST","title":"NFST","text":"<ul>\n<li id=\"PlonkaPottsSteidlTasche2018\">[<a>Plonka, Potts, Steidl, Tasche, 2018</a>]\n  G. Plonka, D. Potts, G. Steidl and M. Tasche. Numerical Fourier Analysis: Theory and Applications.</emph>\n  Springer Nature Switzerland AG, 2018.\n  doi: <a href=\"https://doi.org/10.1007/978-3-030-04306-3\">10.1007/978-3-030-04306-3</a>.\n</li>\n</ul>","category":"page"},{"location":"about.html#About","page":"About","title":"About","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"NFFT3.jl inherited its name from the NFFT3, a C subroutine library . It is currently maintained by Michael Schmischke (michael.schmischke@math.tu-chemnitz.de) with contributions from Tom-Christian Riemer, Toni Volkmer, and Felix Bartel.","category":"page"},{"location":"about.html","page":"About","title":"About","text":"If you want to contribute or have any questions, visit the GitHub repository to clone/fork the repository or open an issue.","category":"page"},{"location":"fastsum.html#fastsum","page":"fastsum","title":"Fast Summation (fastsum)","text":"","category":"section"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    CurrentModule = NFFT3","category":"page"},{"location":"fastsum.html#fastsum-algorithm","page":"fastsum","title":"fastsum algorithm","text":"","category":"section"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"The fast summation algorithm evaluates the function ","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    f(y) coloneqq sum_k=1^M_1 alpha_k  mathscrK (y-x_k)","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"for given (nonequispaced) source knots x_k in mathbbR^d k = 1 ldots M_1 and a given kernel function mathscrK (x) coloneqq K(lVert x rVert_2) x in mathbbR^d. Here, K is required to be infinitely differentiable at x in mathbbR setminus  0 . If K is even infinitely differentiable at 0, mathscrK is called nonsingular kernel function, otherwise singular kernel function.  \nThe evaluation is done at M_2 different points y_j in mathbbR^d j=0 ldots M_2. W.l.o.g. we assume y_j neq x_i   (jneq i), i.e., one wants to compute","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    f(y_j) coloneqq sum_k=1^M_1 alpha_k  mathscrK (y_j-x_k) qquad j=1ldotsM_2","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"We replace mathscrK in the definition above by a periodic function. Hence, we assume lVert y_k rVert_2 leq frac12  (pi - varepsilon_B) and lVert x_k rVert_2 leq frac12  (pi - varepsilon_B) with varepsilon_B in (0pi). By the triangle inequality, we conclude ","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    y_j-x_i in -pi+varepsilon_B pi-varepsilon_B","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"Next, we regularize the kernel near zero and pm pi:","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    K_R (x) coloneqq begincases T_I(x)  lvert x rvert  varepsilon_I  K(x)  varepsilon_I  lvert x rvert leq pi - varepsilon_B  T_B(lvert x rvert)  pi - varepsilon_B  lvert x rvert leq pi endcases","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"With lvert x rvert coloneqq (lvert x_k rvert)_k=0^N-1 we mean to componentwise absolute value and T_I T_B in mathcalP_2p-1 are chosen such that the 2pi-periodic extension of K_R is of class mathcalC^p-1. Further details about the computation of T_I T_B are given in Chapter 7.5, [Plonka, Potts, Steidl, Tasche, 2018].  \nWe define ","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    mathscrK_R (x) coloneqq begincases K_R (lVert x rVert_2)  lVert x rVert  pi  T_B (pi)  lVert x rVert_2 geq pi endcases","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"Since mathscrK_R is sufficiently smooth, we replace it by its partial sum  mathscrK_RF (x) coloneqq sum_pmbl in I_n^d b_pmblmathrme^mathrmi  pmbl cdot x and obtain mathscrK approx mathscrK - mathscrK_R + mathscrK_RF. Using quadrature rules, we replace b_pmbl by","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    b_pmbl coloneqq frac1n^d sum_j in I_n^d mathscrK_R(frac2 pi jn)  mathrme^-2 pi j cdot pmbl  n quad pmbl in I_n^d coloneqq - fracn2fracn2 ^d cap mathbbZ^d ","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"Hence, we have to compute the nearfield sum","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    f_NE (x) coloneqq sum_k=1^M_1 alpha_k  mathscrK_NE (x-x_k) quad mathscrK_NE coloneqq mathscrK - mathscrK_R","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"and the far field sum","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    f_RF (x) coloneqq sum_k=1^M_1 alpha_k  mathscrK_RF (x-x_k)","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"and approximate f by tildef coloneqq f_NE + f_RF. \nFrom y_j-x_i in -pi+varepsilon_B pi-varepsilon_B and the definition of K_R (cdot) we conclude that for the evaluation of f_NE we only need to consider  x fulfilling lVert x rVert leq varepsilon_I. Assuming a certain kind of uniform distribution of the x_k y_i, we obtain an arithmetic cost of mathcalO(M_2). \nFor the evaluation of f_RF(cdot), we rearrange the sums","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    f_RF(y)= sum_k=1^M_1 alpha_k sum_pmbl in I_n^d b_pmbl  mathrme^ mathrmi  pmbl cdot ( y - x_k ) = sum_pmbl in I_n^d b_pmbl (sum_k=1^M_1 alpha_k  mathrme^- mathrmi pmbl x_k) mathrme^mathrmi  pmbl cdot y","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"where the inner sum can be computed by a NFFT^mathrmT which is then followed by a NFFT for the computation of the outer sum. ","category":"page"},{"location":"fastsum.html#Pseudocode","page":"fastsum","title":"Pseudocode","text":"","category":"section"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"Input: alpha_k in mathbbC text for  k = 1 ldots M_1  x_k in mathbbR^d text for  k = 1 ldots M_1 text with  lVert x_k rVert_2 leq frac12  (pi - varepsilon_B)  y_j in mathbbR^d text for  j = 1 ldots M_2 text with  lVert y_j rVert_2 leq frac12  (pi - varepsilon_B)","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"Precomputation: Compute the polynomials T_I and T_B. Compute (b_pmbl)_pmbl in I^d_n. Compute mathscrK_NE (y_j - x_k) text for  j = 1 ldots M_2 text and  k in I^NE_varepsilon_I(j) text where  I^NE_varepsilon_I(j) coloneqq  k in  1 ldots M_1  colon lVert y_j - x_k rVert_2  varepsilon_I .","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"For each pmbl in I^d_n compute alpha_pmbl coloneqq sum^M_1_k = 1 alpha_k e^ - mathrmi  pmbl cdot x_k using the d-variate NFFT^mathrmT of size n times ldots times n, see Algorithm 7.3 in [Plonka, Potts, Steidl, Tasche, 2018].\nFor each pmbl in I^d_n compute the products d_pmbl coloneqq a_pmbl b_pmbl.\nFor j = 1 ldots M_2 compute the far field sums f_RF(y_j) = sum_pmbl in I_n^d d_pmbl  mathrme^ mathrmi  pmbl cdot y_j using the d-variate NFFT of size n times ldots times n, see Algorithm 7.1 in [Plonka, Potts, Steidl, Tasche, 2018].\nFor j = 1 ldots M_2 compute the near field sums f_NE (y_j) coloneqq sum_k in I^NE_varepsilon_I(j) alpha_k mathscrK_NE (y_j - x_k).\nFor j = 1 ldots M_2 compute the near field corrections tildef(y_j) coloneqq f_NE(y_j) + f_RF(y_j).","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"Output: tildef(y_j)  j = 1 ldots M_2, approximate values of f(y_j).","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"Computational cost: mathcalO(m^d (M_1+M_2)+ n^d log n) ","category":"page"},{"location":"fastsum.html#Plan-structure","page":"fastsum","title":"Plan structure","text":"","category":"section"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"    FASTSUM","category":"page"},{"location":"fastsum.html#NFFT3.FASTSUM","page":"fastsum","title":"NFFT3.FASTSUM","text":"FASTSUM\n\nThe fast summation algorithm evaluates the function\n\nf (y) coloneqq sum^N_k = 1 alpha_k  mathscrK (y - x_k) = sum^N_k = 1 alpha_k  K (lVert y - x_k rVert_2)\n\nfor given (nonequispaced) source knots x_k in mathbbR^d  k = 1 cdots N and a given kernel function mathscrK (cdot) = K (lVert cdot rVert_2)  x in mathbbR^d, which is an even, real univariate function which is infinitely differentiable at least in mathbbR setminus  0 . If K is infinitely differentiable at zero as well, then mathscrK is defined on mathbbR^d and is called nonsingular kernel function. The evaluation is done at M different points y_j in mathbbR^d  j = 1 cdots M. \n\nFields\n\nd - dimension.\nN - number of source nodes.\nM - number of target nodes.\nn - expansion degree.\np - degree of smoothness.\nkernel - name of kernel.\nc - kernel parameters.\neps_I - inner boundary.\neps_B - outer boundary.\nnn_x - oversampled nn in x.\nnn_y - oversampled nn in y.\nm_x - NFFT-cutoff in x.\nm_y - NFFT-cutoff in y.\ninit_done - bool for plan init.\nfinalized - bool for finalizer.\nflags - flags.\nx - source nodes.\ny - target nodes.\nalpha - source coefficients.\nf - target evaluations.\nplan - plan (C pointer).\n\nConstructor\n\nFASTSUM(d::Integer,N::Integer,M::Integer,n::Integer,p::Integer,kernel::String,c::Vector{<:Real},eps_I::Real,eps_B::Real,nn_x::Integer,nn_y::Integer,m_x::Integer,m_y::Integer,flags::UInt32)\n\nAdditional Constructor\n\nFASTSUM(d::Integer,N::Integer,M::Integer,n::Integer,p::Integer,kernel::String,c::Real,eps_I::Real,eps_B::Real,nn::Integer,m::Integer)\n\nSee also\n\nNFFT\n\n\n\n\n\n","category":"type"},{"location":"fastsum.html#Functions","page":"fastsum","title":"Functions","text":"","category":"section"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"  \tfastsum_init\n    fastsum_finalize_plan\n    fastsum_trafo\n    fastsum_trafo_exact","category":"page"},{"location":"fastsum.html#NFFT3.fastsum_init","page":"fastsum","title":"NFFT3.fastsum_init","text":"fastsum_init(P)\n\nintialises a transform plan.\n\nInput\n\nP - a FASTSUM plan structure.\n\nSee also\n\nFASTSUM{D}, fastsum_finalize_plan\n\n\n\n\n\n","category":"function"},{"location":"fastsum.html#NFFT3.fastsum_finalize_plan","page":"fastsum","title":"NFFT3.fastsum_finalize_plan","text":"fastsum_finalize_plan(P)\n\ndestroys a FASTSUM plan structure.\n\nInput\n\nP - a FASTSUM plan structure.\n\nSee also\n\nFASTSUM{D}, fastsum_init\n\n\n\n\n\n","category":"function"},{"location":"fastsum.html#NFFT3.fastsum_trafo","page":"fastsum","title":"NFFT3.fastsum_trafo","text":"fastsum_trafo(P)\n\nfast NFFT-based summation.\n\nInput\n\nP - a FASTSUM plan structure.\n\nSee also\n\nFASTSUM{D}, fastsum_trafo_exact\n\n\n\n\n\n","category":"function"},{"location":"fastsum.html#NFFT3.fastsum_trafo_exact","page":"fastsum","title":"NFFT3.fastsum_trafo_exact","text":"fastsum_trafo_exact(P)\n\ndirect computation of sums.\n\nInput\n\nP - a FASTSUM plan structure.\n\nSee also\n\nFASTSUM{D}, fastsum_trafo\n\n\n\n\n\n","category":"function"},{"location":"fastsum.html#Literature","page":"fastsum","title":"Literature","text":"","category":"section"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"<ul>\n<li id=\"PlonkaPottsSteidlTasche2018\">[<a>Plonka, Potts, Steidl, Tasche, 2018</a>]\n  G. Plonka, D. Potts, G. Steidl and M. Tasche. Numerical Fourier Analysis: Theory and Applications.</emph>\n  Springer Nature Switzerland AG, 2018.\n  doi: <a href=\"https://doi.org/10.1007/978-3-030-04306-3\">10.1007/978-3-030-04306-3</a>.\n</li>\n</ul>","category":"page"},{"location":"fastsum.html","page":"fastsum","title":"fastsum","text":"<ul>\n<li id=\"Schmischke2018\">[<a>Schmischke, 2018</a>]\n  M. Schmischke. Nonequispaced Fast Fourier Transform (NFFT) Interface for Julia.</emph>\n  2018.\n  arXiv: <a href=\"https://arxiv.org/abs/1810.09891\">1512.02814</a>.\n</li>\n</ul>","category":"page"},{"location":"NFFT.html#NFFT_site","page":"NFFT","title":"Nonequispaced Fast Fourier Transform (NFFT)","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"    CurrentModule = NFFT3","category":"page"},{"location":"NFFT.html#NFFT-algorithm","page":"NFFT","title":"NFFT algorithm","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"The nonequispaced fast Fourier transform (NFFT or NUFFT), see [Keiner, Kunis, Potts, 2006], overcomes one of the main shortcomings of the FFT - the need for an equispaced sampling grid. Considering the evaluation of the d-dimensional trigonometric polynomial","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  f colon mathbbT^d to mathbbC  pmbx mapsto sum_pmbk in I_pmbN^d hatf_pmbk  mathrme^-2 pi mathrmi  pmbk cdot pmbx","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"with multibandlimit pmbN in 2 mathbbN^d and index set","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  I_pmbN^d coloneqq left pmbk in mathbbZ^d - fracN_i2 leq k_i leq fracN_i2 - 1  i = 12ldotsd right","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"The first approximation is a linear combination of a shifted periodized window function tildevarphi","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  s_1(pmbx) = sum_pmbell in I_pmbn^d g_pmbell  tildevarphileft( pmbx - frac1pmbn odot pmbell right)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"where frac1pmbn is the elementwise inversion of the vector pmbn. We choose an oversampling vector pmbsigma  1 componentwise and obtain the index set by","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  pmbn coloneqq pmbsigma odot pmbN","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Here, odot denotes the componentwise product. Note that one could skip the choice of pmbsigma entirely and directly choose n_i  N_i for i= 1 2 ldotsd. The standard choice in the C library is at the moment ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  n_i = 2^lceil log_2 N_i rceil + 1 i= 1 2 ldots d ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"If the window function varphi R^d to R has a one-periodization ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  tildevarphi(pmbx) = sum_pmbr in mathbbZ^d varphi(pmbx+pmbr) ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"with a uniformly convergent Fourier series, we use the Poisson summation formula and obtain the Fourier coefficients ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  c_pmbk(tildevarphi) = hatvarphi(pmbk)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Here, hatvarphi is the Fourier transform of varphi defined by","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  hatvarphi(pmbk) = int_mathbbT^d varphi(pmbx)  mathrme^-2 pi mathrmi  pmbk cdot pmbx mathrmd pmbx","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Replacing tildevarphi by its Fourier series and splitting the sum in s_1(x) yields","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"beginaligned\n  s_1(pmbx)  = sum_pmbell in I_pmbn^d g_pmbell sum_pmbk in mathbbZ^d c_pmbk(tildevarphi)  mathrme^-2 pi mathrmi  pmbk cdot left( pmbx - frac1pmbn odot pmbellright)   \n\t = sum_pmbk in mathbbZ^d c_pmbk (tildevarphi) underbrace left(sum_pmbell in I_pmbn^d  g_pmbell  mathrme^2 pi mathrmi  frac1pmbn odot (pmbk cdot pmbell) right)_ eqqcolon hatg_pmbk mathrme^-2 pi mathrmi  pmbk cdot pmbx \n\t = sum_pmbk in I_pmbn^d  c_pmbk(tildevarphi) hatg_pmbk  mathrme^-2 pi mathrmi  pmbk cdot pmbx  + sum_pmbr in mathbbZ^d setminus  pmb0  sum_pmbk in I_pmbn^d  c_pmbk(tildevarphi) hatg_pmbk  mathrme^-2 pi mathrmi  (pmbk + pmbn odot pmbr)cdot pmbx \nendaligned","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Furthermore, a comparison of the equation above and f suggests the choice","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  hatg_pmbk = begincases frachatf_pmbkc_pmbk(tildevarphi) quad textfor  pmbk in I_pmbN^d   0 textfor  pmbk in I_pmbn^d  setminus I_pmbN^d  endcases","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Now, we are able to compute g_pmbell by an FFT of size n_1 times n_2 times cdots times n_d. The error of the first approximation f approx s_1 is called aliasing error. For further analysis, we refer to Chapter 7 in [Plonka, Potts, Steidl, Tasche, 2018]. \nWe obtain an approximation psi for varphi if the window function is well localized in the spatial domain by the truncation","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  psi(pmbx) coloneqq varphi(pmbx)  mathbb1_times_i = 1^d -mn_imn_i(pmbx)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"with a chosen window size m ll min_iin12dotsdn_i m in mathbbN. Following the same scheme as above, we can use the periodization ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  tildepsi(pmbx) = sum_pmbr in mathbbZ^d psi(pmbx+pmbr) ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"and look at the linear combination ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  s(pmbx_j) coloneqq sum_pmbell in I_pmbn^d  g_pmbell  tildepsi left( pmbx_j - frac1pmbn odot pmbell right)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"The following calculations show that s approx s_1","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"beginaligned\n  s(pmbx_j) = sum_pmbell in I_pmbn^d  g_pmbell sum_pmbr in mathbbZ^d psi left( pmbx_j - frac1pmbn odot pmbell + pmbr right) \n  = sum_pmbell in I_pmbn^d  g_pmbell sum_pmbr in mathbbZ^d varphi left(pmbx_j - frac1pmbn odot pmbell + pmbr right) mathbb1_times_i = 1^d -mn_imn_i(pmbx_j) \n  = sum_pmbell in I_pmbn^d g_pmbell  mathbb1_times_i = 1^d -mn_imn_i(pmbx_j)  tildevarphi left(pmbx_j - frac1pmbn odot pmbell right) \n  = sum_pmbell in I_pmbnm^d (pmbx_j) g_pmbell  tildevarphi left(pmbx_j - frac1pmbn odot pmbell right)\nendaligned","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"with the index set ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  I_pmbnm(pmbx_j)^d = left pmbell in I_pmbn^d colon pmbn odot pmbx_j - m pmb1 leq pmbell leq pmbn odot pmbx_j +m pmb1 right","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"for a fixed node pmbx_j. This is motivated by ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  -fracmn_i leq left( pmbx_j right)_i leq fracmn_i ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"in order to ensure that pmbx_j is within the support. This second approximation error is called the truncation error. Summarizing, we have f approx s_1 approx s.","category":"page"},{"location":"NFFT.html#Pseudocode","page":"NFFT","title":"Pseudocode","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Input: M in mathbbN pmbN in (2mathbbN)^d pmbn in (2mathbbN)^d m in mathbbN pmbx_j in -0505)^d text for  j =1ldotsM hatf_pmbk in mathbbC text for  pmbk in I^d_pmbN","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Precomputation: Compute the nonzero Fourier coefficients c_pmbk(tildevarphi) text for all  pmbk in I^d_pmbN  Compute the function values tildepsi_jpmbell coloneqq tildepsi (pmbx_j -frac1pmbnodotpmbell) text for  j=1ldotsM text and  pmbell in I_pmbn m^d(pmbx_j)","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Set hatg_pmbk = I^d_pmbn^-1  hatf_pmbk  c_pmbk(tildevarphi) text for  pmbk in I^d_pmbN \nCompute g_pmbell = sum_k in I^d_pmbN hatg_pmbk  mathrme^2 pi mathrmi  pmbk cdot left( frac1pmbn odot pmbellright) for pmbell in I^d_pmbn using a d-variate FFT. \nCompute s(pmbx_j) = sum_pmbell in I_pmbn m^d(pmbx_j) g_pmbell  tildepsi_jpmbell for j =1ldotsM.","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Output: s(pmbx_j)  j =1ldotsM, approximate values of f(pmbx_j).","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Computational cost: mathcalO(N_1 cdot N_2 cdots N_d cdot logN + m^d  M) ","category":"page"},{"location":"NFFT.html#Adjoint-algorithm","page":"NFFT","title":"Adjoint algorithm","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"Using the transposed index set ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"  I_pmbnm^top(pmbell) =  j= 12 ldots M  pmbell - mpmb1 leq pmbn odot pmbx_j leq pmbell + m pmb1 ","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"we obtain the adjoint NFFT algorithm for the fast evaluation the of","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"\thath_pmbk = sum_j = 1^M f_j  mathrme^2 pi  mathrmi  pmbk cdot pmbx_j pmbk in I_pmbN^d","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"for given coefficients f_j in mathbbC j =1ldotsM.","category":"page"},{"location":"NFFT.html#Plan-Structure","page":"NFFT","title":"Plan Structure","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"    NFFT{D}","category":"page"},{"location":"NFFT.html#NFFT3.NFFT","page":"NFFT","title":"NFFT3.NFFT","text":"NFFT{D}\n\nA NFFT (nonequispaced fast Fourier transform) plan, where D is the dimension. \n\nConsidering a D-dimensional trigonometric polynomial\n\nf colon mathbbT^D to mathbbC  f(pmbx) colon = sum_pmbk in I_pmbN^D hatf_pmbk  mathrme^-2 pi mathrmi  pmbk cdot pmbx\n\nwith an index set I_pmbN^D coloneqq left pmbk in mathbbZ^D - fracN_i2 leq k_i leq fracN_i2 - 1  i = 12ldotsD right where pmbN in (2mathbbN)^D is the multibandlimit.  The NDFT (nonequispaced discrete Fourier transform) is its evaluation at M in mathbbN arbitrary points pmbx_j in -0505)^D for j = 1 ldots M,\n\nf(pmbx_j) colon = sum_pmbk in I^D_pmbN hatf_pmbk  mathrme^-2 pi mathrmi  pmbk cdot pmbx_j\n\nwith given coefficients hatf_pmbk in mathbbC. The NFFT is an algorithm for the fast evaluation of the NDFT and the adjoint problem, the fast evaluation of the adjoint NDFT\n\nhath_pmbk coloneqq sum^M_j = 1 f_j  mathrme^-2 pi mathrmi  pmbk cdot pmbx_j  pmbk in I_pmbN^D\n\nfor given coefficients f_j in mathbbC j =12ldotsM. Note that in general, the adjoint NDFT is not the inverse transform of the NDFT.\n\nFields\n\nN - the multibandlimit (N_1 N_2 ldots N_D) of the trigonometric polynomial f.\nM - the number of nodes.\nn - the oversampling (n_1 n_2 ldots n_D) per dimension.\nm - the window size. A larger m results in more accuracy but also a higher computational cost. \nf1 - the NFFT flags.\nf2 - the FFTW flags.\ninit_done - indicates if the plan is initialized.\nfinalized - indicates if the plan is finalized.\nx - the nodes pmbx_j in -0505)^D j = 1 ldots M.\nf - the values f(pmbx_j) for the NFFT or the coefficients f_j in mathbbC j = 1 ldots M for the adjoint NFFT.\nfhat - the Fourier coefficients hatf_pmbk in mathbbC for the NFFT or the values hath_pmbk pmbk in I_pmbN^D for the adjoint NFFT.\nplan - plan (C pointer).\n\nConstructor\n\nNFFT{D}( N::NTuple{D,Int32}, M::Int32, n::NTuple{D,Int32}, m::Int32, f1::UInt32, f2::UInt32 ) where D\n\nAdditional Constructor\n\nNFFT( N::NTuple{D,Int32}, M::Int32, n::NTuple{D,Int32}, m::Int32, f1::UInt32, f2::UInt32 ) where {D}\nNFFT( N::NTuple{D,Int32}, M::Int32 ) where {D}\n\n\n\n\n\n","category":"type"},{"location":"NFFT.html#Functions","page":"NFFT","title":"Functions","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"    nfft_trafo\n    nfft_adjoint\n    nfft_trafo_direct\n    nfft_adjoint_direct\n  \tnfft_finalize_plan\n    nfft_init","category":"page"},{"location":"NFFT.html#NFFT3.nfft_trafo","page":"NFFT","title":"NFFT3.nfft_trafo","text":"nfft_trafo(P)\n\ncomputes the NDFT via the fast NFFT algorithm for provided nodes pmbx_j j =12dotsM in P.X and coefficients hatf_pmbk in mathbbC pmbk in I_pmbN^D in P.fhat.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_trafo_direct\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_adjoint","page":"NFFT","title":"NFFT3.nfft_adjoint","text":"nfft_adjoint(P)\n\ncomputes the adjoint NDFT via the fast adjoint NFFT algorithm for provided nodes pmbx_j j =12dotsM in P.X and coefficients f_j in mathbbC j =12dotsM in P.f.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_adjoint_direct\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_trafo_direct","page":"NFFT","title":"NFFT3.nfft_trafo_direct","text":"nfft_trafo_direct(P)\n\ncomputes the NDFT via naive matrix-vector multiplication for provided nodes pmbx_j j =12dotsM in P.X and coefficients hatf_pmbk in mathbbC pmbk in I_pmbN^D in P.fhat.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_trafo\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_adjoint_direct","page":"NFFT","title":"NFFT3.nfft_adjoint_direct","text":"nfft_adjoint_direct(P)\n\ncomputes the adjoint NDFT via naive matrix-vector multiplication for provided nodes pmbx_j j =12dotsM in P.X and coefficients f_j in mathbbC j =12dotsM in P.f.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_adjoint\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_finalize_plan","page":"NFFT","title":"NFFT3.nfft_finalize_plan","text":"nfft_finalize_plan(P)\n\ndestroys a NFFT plan structure.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_init\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#NFFT3.nfft_init","page":"NFFT","title":"NFFT3.nfft_init","text":"nfft_init(P)\n\nintialises the NFFT plan in C. This function does not have to be called by the user.\n\nInput\n\nP - a NFFT plan structure.\n\nSee also\n\nNFFT{D}, nfft_finalize_plan\n\n\n\n\n\n","category":"function"},{"location":"NFFT.html#Literature","page":"NFFT","title":"Literature","text":"","category":"section"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"<ul>\n<li id=\"KeinerKunisPotts2006\">[<a>Keiner, Kunis, Potts, 2006</a>]\n  J. Keiner, S. Kunis, and D. Potts. Fast summation of radial functions on the sphere. Computing, 78:1–15, 2006.\n</li>\n</ul>","category":"page"},{"location":"NFFT.html","page":"NFFT","title":"NFFT","text":"<ul>\n<li id=\"PlonkaPottsSteidlTasche2018\">[<a>Plonka, Potts, Steidl, Tasche, 2018</a>]\n  G. Plonka, D. Potts, G. Steidl and M. Tasche. Numerical Fourier Analysis: Theory and Applications.</emph>\n  Springer Nature Switzerland AG, 2018.\n  doi: <a href=\"https://doi.org/10.1007/978-3-030-04306-3\">10.1007/978-3-030-04306-3</a>.\n</li>\n</ul>","category":"page"},{"location":"index.html#Welcome-to-NFFT3.jl","page":"Home","title":"Welcome to NFFT3.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The nonequispaced fast Fourier transform or NFFT, see [Keiner, Kunis, Potts, 2006] and [Plonka, Potts, Steidl, Tasche, 2018], overcomes one of the main shortcomings of the FFT - the need for an equispaced sampling grid. Considering a d-dimensional trigonometric polynomial ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"  \tf(pmbx) coloneqq sum_ pmbk in I_pmbN^d hatf_pmbk  mathrme^-2pimathrmipmbkcdotpmbx","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"with an index set I_pmbN^d coloneqq  pmbk in mathbbZ^d -fracN_i2 leq pmbk_i leq fracN_i2-1 i=12ldotsd  where pmbN in (2mathbbN)^d is the multibandlimit, the nonequispaced fast Fourier transform (NDFT) is its evaluation at M in mathbbN nonequispaced points pmbx_j in mathbbT^d for j = 12 ldots M,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"  \tf(pmbx_j) =sum_pmbk in I_pmbN^d hatf_pmbk  mathrme^-2 pi mathrmi  pmbk cdot pmbx_j","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"with given coefficients hatf_pmbk in mathbbC where we identify the smooth manifold of the torus mathbbT with -12 12). The NFFT is an algorithm for the fast evaluation of the sums f(pmbx_j) as well as the adjoint problem, the fast evaluation of","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"\thath_pmbk = sum_j = 1^M f_j  mathrme^2 pi mathrmi  pmbk cdot pmbx_j pmbk in I_pmbN^d","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"for given coefficients f_j in mathbbC. The available NFFT3 library [Keiner, Kunis, Potts, NFFT3] provides C routines for the NFFT as well as applications such as the fast evaluation of sums","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"  \tg(pmby_j) coloneqq sum_k=1^N alpha_k  K(lVert pmby_j - pmbx_k rVert_2) j = 1 ldots M","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"for given coefficients alpha_k in mathbbC, nodes pmbx_kpmby_j in R^d  and a radial kernel function K 0infty) to 0infty), and generalizations such as the NNFFT for nonequispaced nodes in time and frequency domain. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The NFFT3 C library has been developed at the Mathematical Institute of the University of Luebeck, at the Mathematical Institute of the University Osnabrueck and at the Faculty of Mathematics of the Chemnitz University of Technology by Jens Keiner, Stefan Kunis and Daniel Potts. Further contributions, in particular applications, are due to Dr. Markus Fenn, Steffen Klatt, Tobias Knopp and Antje Vollrath. The support for OpenMP was developed by Toni Volkmer. Many contributions to the release 3.3.* and later have been done by Toni Volkmer, Michael Quellmalz, and Michael Schmischke.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This package offers a Julia wrapper for the NFFT, NFCT, NFST, and fastsum algorithms, see [Schmischke, 2018].","category":"page"},{"location":"index.html#Literature","page":"Home","title":"Literature","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"<ul>\n<li id=\"PlonkaPottsSteidlTasche2018\">[<a>Plonka, Potts, Steidl, Tasche, 2018</a>]\n  G. Plonka, D. Potts, G. Steidl and M. Tasche. Numerical Fourier Analysis: Theory and Applications.</emph>\n  Springer Nature Switzerland AG, 2018.\n  doi: <a href=\"https://doi.org/10.1007/978-3-030-04306-3\">10.1007/978-3-030-04306-3</a>.\n</li>\n</ul>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<ul>\n<li id=\"Schmischke2018\">[<a>Schmischke, 2018</a>]\n  M. Schmischke. Nonequispaced Fast Fourier Transform (NFFT) Interface for Julia.</emph>\n  2018.\n  arXiv: <a href=\"https://arxiv.org/abs/1810.09891\">1512.02814</a>.\n</li>\n</ul>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<ul>\n<li id=\"KeinerKunisPotts2006\">[<a>Keiner, Kunis, Potts, 2006</a>]\n  J. Keiner, S. Kunis, and D. Potts. Fast summation of radial functions on the sphere. </emph>\n  Computing, 78:1--15, 2006.\n  doi: <a href=\"https://doi.org/10.1007/s00607-006-0169-z\">1512.02814</a>.\n</li>\n</ul>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<ul>\n<li id=\"KeinerKunisPottsNFFT3\">[<a>Keiner, Kunis, Potts, NFFT3</a>]\n  J. Keiner, S. Kunis, and D. Potts. NFFT 3.0, C subroutine library. </emph>\n  url: <a href=\"http://www.tu-chemnitz.de/~potts/nfft\">1512.02814</a>.\n</li>\n</ul>","category":"page"},{"location":"notation.html#Notation","page":"Notation","title":"Notation","text":"","category":"section"}]
}
